/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/connection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listConnections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connector-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listConnectorConfigs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "connectors.greenhouse.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "greenhouse";
            settings: {
                apiKey: string;
            };
        };
        "connectors.greenhouse.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "greenhouse";
            config: null;
        };
        "connectors.plaid.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "plaid";
            settings: {
                itemId?: string | null;
                accessToken: string;
                institution?: unknown;
                item?: unknown;
                status?: unknown;
                webhookItemError?: null;
            };
        };
        "connectors.plaid.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "plaid";
            config: {
                /** @enum {string} */
                envName: "sandbox" | "development" | "production";
                credentials?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /** @default This Application */
                clientName: string;
                /** @default [
                 *       "transactions"
                 *     ] */
                products: ("assets" | "auth" | "balance" | "identity" | "investments" | "liabilities" | "payment_initiation" | "identity_verification" | "transactions" | "credit_details" | "income" | "income_verification" | "deposit_switch" | "standing_orders" | "transfer" | "employment" | "recurring_transactions")[];
                /** @default [
                 *       "US",
                 *       "CA"
                 *     ] */
                countryCodes: ("US" | "GB" | "ES" | "NL" | "FR" | "IE" | "CA" | "DE" | "IT" | "PL" | "DK" | "NO" | "SE" | "EE" | "LT" | "LV")[];
                /**
                 * @default en
                 * @enum {string}
                 */
                language: "en" | "fr" | "es" | "nl" | "de";
            };
        };
        /** Connection */
        "core.connection": {
            connector_name: "core.connection";
        } & ({
            id: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
            connector_config_id: string;
        } & Omit<components["schemas"]["connectors.greenhouse.connectionSettings"] | components["schemas"]["connectors.plaid.connectionSettings"], "connector_name">);
        /** Connector Config */
        "core.connector_config": {
            connector_name: "core.connector_config";
        } & ({
            id: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            created_at: string;
            org_id: string;
        } & Omit<components["schemas"]["connectors.greenhouse.connectorConfig"] | components["schemas"]["connectors.plaid.connectorConfig"], "connector_name">);
        /**
         * Insufficient access error (403)
         * @description The error information
         * @example {
         *       "code": "FORBIDDEN",
         *       "message": "Insufficient access",
         *       "issues": []
         *     }
         */
        "error.FORBIDDEN": {
            /**
             * @description The error message
             * @example Insufficient access
             */
            message: string;
            /**
             * @description The error code
             * @example FORBIDDEN
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Internal server error error (500)
         * @description The error information
         * @example {
         *       "code": "INTERNAL_SERVER_ERROR",
         *       "message": "Internal server error",
         *       "issues": []
         *     }
         */
        "error.INTERNAL_SERVER_ERROR": {
            /**
             * @description The error message
             * @example Internal server error
             */
            message: string;
            /**
             * @description The error code
             * @example INTERNAL_SERVER_ERROR
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Authorization not provided error (401)
         * @description The error information
         * @example {
         *       "code": "UNAUTHORIZED",
         *       "message": "Authorization not provided",
         *       "issues": []
         *     }
         */
        "error.UNAUTHORIZED": {
            /**
             * @description The error message
             * @example Authorization not provided
             */
            message: string;
            /**
             * @description The error code
             * @example UNAUTHORIZED
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listConnections: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["core.connection"][];
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    listConnectorConfigs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["core.connector_config"][];
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
}
