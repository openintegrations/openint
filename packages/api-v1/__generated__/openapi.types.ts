/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/connection/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Connection & Credentials
         * @description Get details of a specific connection, including credentials
         */
        get: operations["getConnection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Connections
         * @description List all connections with optional filtering
         */
        get: operations["listConnections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connection/{id}/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Connection Health
         * @description Verify that a connection is healthy
         */
        post: operations["checkConnection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connector-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Connector Configurations
         * @description List all connector configurations
         */
        get: operations["listConnectorConfigs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all connectors
         * @description List all connectors with optional filtering
         */
        get: operations["listConnectors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Organization Events
         * @description List all events for an organization
         */
        get: operations["listEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/onboarding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOnboarding"];
        put: operations["setOnboardingComplete"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/{customer_id}/magic-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Magic Link
         * @description Create a magic link for connecting integrations
         */
        post: operations["createMagicLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/customer/{customer_id}/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Customer Authentication Token
         * @description Create an authentication token for a customer
         */
        post: operations["createToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Check if the API is operational
         */
        get: operations["health"];
        put?: never;
        post: operations["healthEcho"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/viewer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get information about the current authenticated user
         */
        get: operations["viewer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AuthMode
         * @enum {string}
         */
        AuthMode: "OAUTH2" | "OAUTH1" | "BASIC" | "API_KEY";
        /** aircall */
        "connectors.aircall.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "aircall";
            settings: {
                apiId: string;
                apiToken: string;
            };
        };
        /** aircall */
        "connectors.aircall.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "aircall";
            config: null;
        };
        /** airtable */
        "connectors.airtable.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "airtable";
            settings: {
                apiKey: string;
                airtableBase: string;
            };
        };
        /** airtable */
        "connectors.airtable.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "airtable";
            config: null;
        };
        /** apollo */
        "connectors.apollo.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "apollo";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** apollo */
        "connectors.apollo.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "apollo";
            config: null;
        };
        /** beancount */
        "connectors.beancount.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "beancount";
            settings: null;
        };
        /** beancount */
        "connectors.beancount.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "beancount";
            config: null;
        };
        /** brex */
        "connectors.brex.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "brex";
            settings: {
                accessToken: string;
            };
        };
        /** brex */
        "connectors.brex.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "brex";
            config: {
                /** @description Oauth support */
                oauth?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /** @description API key auth support */
                apikeyAuth?: boolean;
            };
        };
        /** coda */
        "connectors.coda.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "coda";
            settings: {
                apiKey: string;
            };
        };
        /** coda */
        "connectors.coda.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "coda";
            config: null;
        };
        /** confluence */
        "connectors.confluence.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "confluence";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** confluence */
        "connectors.confluence.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "confluence";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** discord */
        "connectors.discord.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "discord";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** discord */
        "connectors.discord.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "discord";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** finch */
        "connectors.finch.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "finch";
            settings: {
                access_token: string;
            };
        };
        /** finch */
        "connectors.finch.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "finch";
            config: {
                client_id: string;
                client_secret: string;
                /** @description Finch API version */
                api_version?: string;
                /** @description Finch products to access, @see https://developer.tryfinch.com/api-reference/development-guides/Permissions */
                products: ("company" | "directory" | "individual" | "ssn" | "employment" | "payment" | "pay_statement" | "benefits")[];
            };
        };
        /** firebase */
        "connectors.firebase.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "firebase";
            settings: {
                /** @constant */
                role: "admin";
                serviceAccount: {
                    project_id: string;
                } & {
                    [key: string]: unknown;
                };
            } | {
                /** @constant */
                role: "user";
                firebaseConfig: {
                    projectId: string;
                    apiKey: string;
                    appId: string;
                    authDomain: string;
                    databaseURL: string;
                    storageBucket?: string;
                    measurementId?: string;
                    messagingSenderId?: string;
                };
                authData: {
                    /** @constant */
                    method: "userJson";
                    userJson: {
                        uid: string;
                        appName: string;
                        stsTokenManager: {
                            [key: string]: unknown;
                        };
                    } & {
                        [key: string]: unknown;
                    };
                } | {
                    /** @constant */
                    method: "customToken";
                    customToken: string;
                } | {
                    /** @constant */
                    method: "emailPassword";
                    email: string;
                    password: string;
                };
            };
        };
        /** firebase */
        "connectors.firebase.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "firebase";
            config: null;
        };
        /** foreceipt */
        "connectors.foreceipt.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "foreceipt";
            settings: {
                credentials?: unknown;
                options?: unknown;
                _id?: unknown;
                /** @enum {string} */
                envName: "staging" | "production";
            };
        };
        /** foreceipt */
        "connectors.foreceipt.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "foreceipt";
            config: null;
        };
        /** github */
        "connectors.github.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "github";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** github */
        "connectors.github.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "github";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** gong */
        "connectors.gong.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "gong";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** gong */
        "connectors.gong.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "gong";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** google */
        "connectors.google.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
                client_id?: string;
            };
        };
        /** google */
        "connectors.google.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    /** @description global google connector space separated scopes */
                    scopes?: string;
                };
                integrations: {
                    drive?: {
                        enabled?: boolean;
                        /** @description drive specific space separated scopes */
                        scopes?: string;
                    };
                    gmail?: {
                        enabled?: boolean;
                        /** @description gmail specific space separated scopes */
                        scopes?: string;
                    };
                    calendar?: {
                        enabled?: boolean;
                        /** @description calendar specific space separated scopes */
                        scopes?: string;
                    };
                    sheets?: {
                        enabled?: boolean;
                        /** @description sheets specific space separated scopes */
                        scopes?: string;
                    };
                    docs?: {
                        enabled?: boolean;
                        /** @description docs specific space separated scopes */
                        scopes?: string;
                    };
                    slides?: {
                        enabled?: boolean;
                        /** @description slides specific space separated scopes */
                        scopes?: string;
                    };
                };
            };
        };
        /** googledrive */
        "connectors.googledrive.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "googledrive";
            settings: {
                oauth: {
                    credentials: Record<string, never>;
                };
                metadata?: {
                    [key: string]: unknown;
                };
            };
        };
        /** googledrive */
        "connectors.googledrive.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "googledrive";
            config: {
                client_id: string;
                client_secret: string;
                scopes?: string[] | null;
            };
        };
        /** greenhouse */
        "connectors.greenhouse.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "greenhouse";
            settings: {
                apiKey: string;
            };
        };
        /** greenhouse */
        "connectors.greenhouse.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "greenhouse";
            config: null;
        };
        /** heron */
        "connectors.heron.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "heron";
            settings: null;
        };
        /** heron */
        "connectors.heron.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "heron";
            config: {
                apiKey: string;
            };
        };
        /** hubspot */
        "connectors.hubspot.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "hubspot";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
                extra?: unknown;
            };
        };
        /** hubspot */
        "connectors.hubspot.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "hubspot";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** intercom */
        "connectors.intercom.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "intercom";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** intercom */
        "connectors.intercom.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "intercom";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** jira */
        "connectors.jira.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "jira";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** jira */
        "connectors.jira.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "jira";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** kustomer */
        "connectors.kustomer.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "kustomer";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** kustomer */
        "connectors.kustomer.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "kustomer";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** lever */
        "connectors.lever.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lever";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** lever */
        "connectors.lever.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lever";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
                /** @enum {string} */
                envName: "sandbox" | "production";
            };
        };
        /** linear */
        "connectors.linear.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "linear";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** linear */
        "connectors.linear.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "linear";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** lunchmoney */
        "connectors.lunchmoney.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lunchmoney";
            settings: null;
        };
        /** lunchmoney */
        "connectors.lunchmoney.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lunchmoney";
            config: {
                accessToken: string;
            };
        };
        /** mercury */
        "connectors.mercury.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "mercury";
            settings: null;
        };
        /** mercury */
        "connectors.mercury.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "mercury";
            config: {
                /** @description Oauth support */
                oauth?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /** @description API key auth support */
                apikeyAuth?: boolean;
            };
        };
        /** merge */
        "connectors.merge.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "merge";
            settings: {
                accountToken: string;
                accountDetails?: unknown;
            };
        };
        /** merge */
        "connectors.merge.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "merge";
            config: {
                apiKey: string;
            };
        };
        /** microsoft */
        "connectors.microsoft.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "microsoft";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
                client_id?: string;
            };
        };
        /** microsoft */
        "connectors.microsoft.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "microsoft";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    /** @description global microsoft connector space separated scopes */
                    scopes?: string;
                };
                integrations: {
                    sharepoint?: {
                        enabled?: boolean;
                        /** @description sharepoint specific space separated scopes */
                        scopes?: string;
                    };
                    outlook?: {
                        enabled?: boolean;
                        /** @description outlook specific space separated scopes */
                        scopes?: string;
                    };
                    teams?: {
                        enabled?: boolean;
                        /** @description teams specific space separated scopes */
                        scopes?: string;
                    };
                };
            };
        };
        /** moota */
        "connectors.moota.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "moota";
            settings: null;
        };
        /** moota */
        "connectors.moota.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "moota";
            config: {
                token: string;
            };
        };
        /** onebrick */
        "connectors.onebrick.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "onebrick";
            settings: {
                accessToken: string;
            };
        };
        /** onebrick */
        "connectors.onebrick.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "onebrick";
            config: {
                /** @enum {string} */
                envName: "sandbox" | "production";
                clientId: string;
                clientSecret: string;
                publicToken: string;
                accessToken?: string | null;
                redirectUrl?: string | null;
            };
        };
        /** outreach */
        "connectors.outreach.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "outreach";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** outreach */
        "connectors.outreach.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "outreach";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** pipedrive */
        "connectors.pipedrive.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "pipedrive";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** pipedrive */
        "connectors.pipedrive.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "pipedrive";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** plaid */
        "connectors.plaid.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "plaid";
            settings: {
                itemId?: string | null;
                accessToken: string;
                institution?: unknown;
                item?: unknown;
                status?: unknown;
                webhookItemError?: null;
            };
        };
        /** plaid */
        "connectors.plaid.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "plaid";
            config: {
                /** @enum {string} */
                envName: "sandbox" | "development" | "production";
                credentials?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /**
                 * @description The name of your application, as it should be displayed in Link.
                 *             Maximum length of 30 characters.
                 *             If a value longer than 30 characters is provided, Link will display "This Application" instead.
                 * @default This Application
                 */
                clientName: string;
                /** @default [
                 *       "transactions"
                 *     ] */
                products: ("assets" | "auth" | "balance" | "identity" | "investments" | "liabilities" | "payment_initiation" | "identity_verification" | "transactions" | "credit_details" | "income" | "income_verification" | "deposit_switch" | "standing_orders" | "transfer" | "employment" | "recurring_transactions")[];
                /** @default [
                 *       "US",
                 *       "CA"
                 *     ] */
                countryCodes: ("US" | "GB" | "ES" | "NL" | "FR" | "IE" | "CA" | "DE" | "IT" | "PL" | "DK" | "NO" | "SE" | "EE" | "LT" | "LV")[];
                /**
                 * @default en
                 * @enum {string}
                 */
                language: "en" | "fr" | "es" | "nl" | "de";
            };
        };
        /** postgres */
        "connectors.postgres.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "postgres";
            settings: {
                databaseUrl: string;
                migrateTables?: boolean;
                sourceQueries?: {
                    /** @description Should order by lastModifiedAt and id descending */
                    invoice?: string | null;
                };
            };
        };
        /** postgres */
        "connectors.postgres.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "postgres";
            config: null;
        };
        /** qbo */
        "connectors.qbo.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "qbo";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config: {
                        realmId: string;
                    };
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** qbo */
        "connectors.qbo.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "qbo";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
                /** @enum {string} */
                envName: "sandbox" | "production";
                /** @description For proxies, not typically needed */
                url?: string | null;
                /** @description For webhooks */
                verifierToken?: string | null;
            };
        };
        /** ramp */
        "connectors.ramp.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "ramp";
            settings: {
                accessToken?: string | null;
                startAfterTransactionId?: string | null;
            };
        };
        /** ramp */
        "connectors.ramp.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "ramp";
            config: {
                oauth: {
                    clientId: string;
                    clientSecret: string;
                };
            };
        };
        /** salesforce */
        "connectors.salesforce.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "salesforce";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** salesforce */
        "connectors.salesforce.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "salesforce";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** salesloft */
        "connectors.salesloft.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "salesloft";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** salesloft */
        "connectors.salesloft.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "salesloft";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** saltedge */
        "connectors.saltedge.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "saltedge";
            settings?: unknown;
        };
        /** saltedge */
        "connectors.saltedge.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "saltedge";
            config: {
                appId: string;
                secret: string;
                url?: string | null;
            };
        };
        /** slack */
        "connectors.slack.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "slack";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** slack */
        "connectors.slack.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "slack";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** splitwise */
        "connectors.splitwise.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "splitwise";
            settings: {
                currentUser?: {
                    country_code: string;
                    custom_picture: boolean;
                    date_format: string;
                    default_currency: string;
                    default_group_id: number;
                    email: string;
                    first_name: string;
                    force_refresh_at: string;
                    id: number;
                    last_name: string;
                    locale: string;
                    notifications: {
                        added_as_friend: boolean;
                        added_to_group: boolean;
                        announcements: boolean;
                        bills: boolean;
                        expense_added: boolean;
                        expense_updated: boolean;
                        monthly_summary: boolean;
                        payments: boolean;
                    };
                    notifications_count: number;
                    notifications_read: string;
                    picture: {
                        original?: string | null;
                        xxlarge?: string | null;
                        xlarge?: string | null;
                        large?: string | null;
                        medium?: string | null;
                        small?: string | null;
                    };
                    registration_status: string;
                } | null;
                accessToken: string;
            };
        };
        /** splitwise */
        "connectors.splitwise.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "splitwise";
            config: null;
        };
        /** stripe */
        "connectors.stripe.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "stripe";
            settings: {
                secretKey: string;
            };
        };
        /** stripe */
        "connectors.stripe.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "stripe";
            config: {
                /** @description Oauth support */
                oauth?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /** @description API key auth support */
                apikeyAuth?: boolean;
            };
        };
        /** teller */
        "connectors.teller.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "teller";
            settings: {
                token: string;
            };
        };
        /** teller */
        "connectors.teller.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "teller";
            config: {
                applicationId: string;
                token?: string | null;
            };
        };
        /** toggl */
        "connectors.toggl.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "toggl";
            settings: {
                apiToken: string;
                email?: string | null;
                password?: string | null;
            };
        };
        /** toggl */
        "connectors.toggl.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "toggl";
            config: null;
        };
        /** twenty */
        "connectors.twenty.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "twenty";
            settings: {
                access_token: string;
            };
        };
        /** twenty */
        "connectors.twenty.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "twenty";
            config: null;
        };
        /** venmo */
        "connectors.venmo.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "venmo";
            settings: {
                me?: unknown;
                credentials?: unknown;
            };
        };
        /** venmo */
        "connectors.venmo.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "venmo";
            config: {
                v1BaseURL?: string | null;
                v5BaseURL?: string | null;
                proxy?: {
                    url: string;
                    cert: string;
                } | null;
            };
        };
        /** wise */
        "connectors.wise.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "wise";
            settings: {
                /** @enum {string} */
                envName: "sandbox" | "live";
                apiToken?: string | null;
            };
        };
        /** wise */
        "connectors.wise.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "wise";
            config: null;
        };
        /** xero */
        "connectors.xero.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "xero";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** xero */
        "connectors.xero.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "xero";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** yodlee */
        "connectors.yodlee.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "yodlee";
            settings: {
                accessToken?: {
                    accessToken: string;
                    issuedAt: string;
                    expiresIn: number;
                } | null;
                loginName: string;
                providerAccountId: number | string;
                user?: null;
                provider?: null;
                providerAccount?: {
                    aggregationSource: string;
                    createdDate: string;
                    dataset: unknown[];
                    id: number;
                    isManual: boolean;
                    providerId: number;
                    /** @enum {string} */
                    status: "LOGIN_IN_PROGRESS" | "USER_INPUT_REQUIRED" | "IN_PROGRESS" | "PARTIAL_SUCCESS" | "SUCCESS" | "FAILED";
                    isDeleted?: boolean | null;
                } | null;
            };
        };
        /** yodlee */
        "connectors.yodlee.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "yodlee";
            config: {
                /** @enum {string} */
                envName: "sandbox" | "development" | "production";
                clientId: string;
                clientSecret: string;
                adminLoginName: string;
                sandboxLoginName?: string | null;
                proxy?: {
                    url: string;
                    cert: string;
                } | null;
            };
        };
        /** zohodesk */
        "connectors.zohodesk.connectionSettings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "zohodesk";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type: string;
                            scope?: string;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** zohodesk */
        "connectors.zohodesk.connectorConfig": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "zohodesk";
            config: {
                oauth: {
                    client_id: string;
                    client_secret: string;
                    scopes?: string;
                };
            };
        };
        /** Connection */
        "core.connection": {
            connector_name: "core.connection";
        } & ({
            id: string;
            updated_at: string;
            created_at: string;
            connector_config_id: string;
        } & Omit<components["schemas"]["connectors.aircall.connectionSettings"] | components["schemas"]["connectors.airtable.connectionSettings"] | components["schemas"]["connectors.apollo.connectionSettings"] | components["schemas"]["connectors.beancount.connectionSettings"] | components["schemas"]["connectors.brex.connectionSettings"] | components["schemas"]["connectors.coda.connectionSettings"] | components["schemas"]["connectors.confluence.connectionSettings"] | components["schemas"]["connectors.discord.connectionSettings"] | components["schemas"]["connectors.finch.connectionSettings"] | components["schemas"]["connectors.firebase.connectionSettings"] | components["schemas"]["connectors.foreceipt.connectionSettings"] | components["schemas"]["connectors.github.connectionSettings"] | components["schemas"]["connectors.gong.connectionSettings"] | components["schemas"]["connectors.google.connectionSettings"] | components["schemas"]["connectors.greenhouse.connectionSettings"] | components["schemas"]["connectors.heron.connectionSettings"] | components["schemas"]["connectors.hubspot.connectionSettings"] | components["schemas"]["connectors.intercom.connectionSettings"] | components["schemas"]["connectors.jira.connectionSettings"] | components["schemas"]["connectors.kustomer.connectionSettings"] | components["schemas"]["connectors.lever.connectionSettings"] | components["schemas"]["connectors.linear.connectionSettings"] | components["schemas"]["connectors.lunchmoney.connectionSettings"] | components["schemas"]["connectors.mercury.connectionSettings"] | components["schemas"]["connectors.merge.connectionSettings"] | components["schemas"]["connectors.microsoft.connectionSettings"] | components["schemas"]["connectors.moota.connectionSettings"] | components["schemas"]["connectors.onebrick.connectionSettings"] | components["schemas"]["connectors.outreach.connectionSettings"] | components["schemas"]["connectors.pipedrive.connectionSettings"] | components["schemas"]["connectors.plaid.connectionSettings"] | components["schemas"]["connectors.postgres.connectionSettings"] | components["schemas"]["connectors.qbo.connectionSettings"] | components["schemas"]["connectors.ramp.connectionSettings"] | components["schemas"]["connectors.salesforce.connectionSettings"] | components["schemas"]["connectors.salesloft.connectionSettings"] | components["schemas"]["connectors.saltedge.connectionSettings"] | components["schemas"]["connectors.slack.connectionSettings"] | components["schemas"]["connectors.splitwise.connectionSettings"] | components["schemas"]["connectors.stripe.connectionSettings"] | components["schemas"]["connectors.teller.connectionSettings"] | components["schemas"]["connectors.toggl.connectionSettings"] | components["schemas"]["connectors.twenty.connectionSettings"] | components["schemas"]["connectors.venmo.connectionSettings"] | components["schemas"]["connectors.wise.connectionSettings"] | components["schemas"]["connectors.xero.connectionSettings"] | components["schemas"]["connectors.yodlee.connectionSettings"] | components["schemas"]["connectors.zohodesk.connectionSettings"] | components["schemas"]["connectors.googledrive.connectionSettings"], "connector_name">);
        /** Connector */
        "core.connector": {
            name: string;
            display_name?: string;
            logo_url?: string;
            stage?: string;
            platforms?: string[];
        };
        /** event */
        "core.event": {
            id: string;
            name: string;
            data: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | unknown[];
            timestamp: string;
            user: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | unknown[] | null;
            v: string | null;
            org_id: string | null;
            user_id: string | null;
            customer_id: string | null;
        };
        /** Integration */
        "core.integration": {
            [key: string]: unknown;
        };
        /**
         * Invalid input data error (400)
         * @description The error information
         * @example {
         *       "code": "BAD_REQUEST",
         *       "message": "Invalid input data",
         *       "issues": []
         *     }
         */
        "error.BAD_REQUEST": {
            /**
             * @description The error message
             * @example Invalid input data
             */
            message: string;
            /**
             * @description The error code
             * @example BAD_REQUEST
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Insufficient access error (403)
         * @description The error information
         * @example {
         *       "code": "FORBIDDEN",
         *       "message": "Insufficient access",
         *       "issues": []
         *     }
         */
        "error.FORBIDDEN": {
            /**
             * @description The error message
             * @example Insufficient access
             */
            message: string;
            /**
             * @description The error code
             * @example FORBIDDEN
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Internal server error error (500)
         * @description The error information
         * @example {
         *       "code": "INTERNAL_SERVER_ERROR",
         *       "message": "Internal server error",
         *       "issues": []
         *     }
         */
        "error.INTERNAL_SERVER_ERROR": {
            /**
             * @description The error message
             * @example Internal server error
             */
            message: string;
            /**
             * @description The error code
             * @example INTERNAL_SERVER_ERROR
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Not found error (404)
         * @description The error information
         * @example {
         *       "code": "NOT_FOUND",
         *       "message": "Not found",
         *       "issues": []
         *     }
         */
        "error.NOT_FOUND": {
            /**
             * @description The error message
             * @example Not found
             */
            message: string;
            /**
             * @description The error code
             * @example NOT_FOUND
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Authorization not provided error (401)
         * @description The error information
         * @example {
         *       "code": "UNAUTHORIZED",
         *       "message": "Authorization not provided",
         *       "issues": []
         *     }
         */
        "error.UNAUTHORIZED": {
            /**
             * @description The error message
             * @example Authorization not provided
             */
            message: string;
            /**
             * @description The error code
             * @example UNAUTHORIZED
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getConnection: {
        parameters: {
            query?: {
                /** @description Controls secret inclusion: none (default), basic (auth only), or all secrets */
                include_secrets?: "none" | "basic" | "all";
                /** @description Controls credential refresh: none (never), force (always), or auto (when expired, default) */
                refresh_policy?: "none" | "force" | "auto";
                expand?: ("connector" | "enabled_integrations")[];
            };
            header?: never;
            path: {
                /** @description The id of the connection, starts with `conn_` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["core.connection"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    listConnections: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned */
                limit?: number;
                /** @description Offset the items returned */
                offset?: number;
                /** @description The name of the connector */
                connector_name?: "aircall" | "airtable" | "apollo" | "beancount" | "brex" | "coda" | "confluence" | "discord" | "finch" | "firebase" | "foreceipt" | "github" | "gong" | "google" | "greenhouse" | "heron" | "hubspot" | "intercom" | "jira" | "kustomer" | "lever" | "linear" | "lunchmoney" | "merge" | "microsoft" | "moota" | "onebrick" | "outreach" | "pipedrive" | "plaid" | "qbo" | "ramp" | "salesforce" | "salesloft" | "saltedge" | "slack" | "splitwise" | "stripe" | "teller" | "toggl" | "twenty" | "wise" | "xero" | "yodlee" | "zohodesk" | "googledrive";
                /** @description The id of the customer in your application. Ensure it is unique for that customer. */
                customer_id?: string;
                /** @description The id of the connector config, starts with `ccfg_` */
                connector_config_id?: string;
                /** @description Controls secret inclusion: none (default), basic (auth only), or all secrets */
                include_secrets?: "none" | "basic" | "all";
                expand?: ("connector" | "enabled_integrations")[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["core.connection"][];
                        /** @description Total number of items in the database for the organization */
                        total: number;
                        /**
                         * @description Limit the number of items returned
                         * @default 50
                         */
                        limit: number;
                        /**
                         * @description Offset the items returned
                         * @default 0
                         */
                        offset: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    checkConnection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the connection, starts with `conn_` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The id of the connection, starts with `conn_` */
                        id: string;
                        /**
                         * @description Connection status: healthy (all well), disconnected (needs reconnection), error (system issue), manual (import connection)
                         * @enum {string}
                         */
                        status: "healthy" | "disconnected" | "error" | "manual";
                        /**
                         * @description Error types: refresh_failed and unknown_external_error
                         * @enum {string}
                         */
                        error?: "refresh_failed" | "unknown_external_error";
                        /** @description Optional expanded error message */
                        errorMessage?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    listConnectorConfigs: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned */
                limit?: number;
                /** @description Offset the items returned */
                offset?: number;
                /** @description Comma separated list of fields to expand.
                 *
                 *     Available Options: `connector`, `enabled_integrations` */
                expand?: string;
                /** @description The name of the connector */
                connector_name?: "aircall" | "airtable" | "apollo" | "beancount" | "brex" | "coda" | "confluence" | "discord" | "finch" | "firebase" | "foreceipt" | "github" | "gong" | "google" | "greenhouse" | "heron" | "hubspot" | "intercom" | "jira" | "kustomer" | "lever" | "linear" | "lunchmoney" | "merge" | "microsoft" | "moota" | "onebrick" | "outreach" | "pipedrive" | "plaid" | "qbo" | "ramp" | "salesforce" | "salesloft" | "saltedge" | "slack" | "splitwise" | "stripe" | "teller" | "toggl" | "twenty" | "wise" | "xero" | "yodlee" | "zohodesk" | "googledrive";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            id: string;
                            updated_at: string;
                            created_at: string;
                            org_id: string;
                        } & Omit<components["schemas"]["connectors.aircall.connectorConfig"] | components["schemas"]["connectors.airtable.connectorConfig"] | components["schemas"]["connectors.apollo.connectorConfig"] | components["schemas"]["connectors.beancount.connectorConfig"] | components["schemas"]["connectors.brex.connectorConfig"] | components["schemas"]["connectors.coda.connectorConfig"] | components["schemas"]["connectors.confluence.connectorConfig"] | components["schemas"]["connectors.discord.connectorConfig"] | components["schemas"]["connectors.finch.connectorConfig"] | components["schemas"]["connectors.firebase.connectorConfig"] | components["schemas"]["connectors.foreceipt.connectorConfig"] | components["schemas"]["connectors.github.connectorConfig"] | components["schemas"]["connectors.gong.connectorConfig"] | components["schemas"]["connectors.google.connectorConfig"] | components["schemas"]["connectors.greenhouse.connectorConfig"] | components["schemas"]["connectors.heron.connectorConfig"] | components["schemas"]["connectors.hubspot.connectorConfig"] | components["schemas"]["connectors.intercom.connectorConfig"] | components["schemas"]["connectors.jira.connectorConfig"] | components["schemas"]["connectors.kustomer.connectorConfig"] | components["schemas"]["connectors.lever.connectorConfig"] | components["schemas"]["connectors.linear.connectorConfig"] | components["schemas"]["connectors.lunchmoney.connectorConfig"] | components["schemas"]["connectors.mercury.connectorConfig"] | components["schemas"]["connectors.merge.connectorConfig"] | components["schemas"]["connectors.microsoft.connectorConfig"] | components["schemas"]["connectors.moota.connectorConfig"] | components["schemas"]["connectors.onebrick.connectorConfig"] | components["schemas"]["connectors.outreach.connectorConfig"] | components["schemas"]["connectors.pipedrive.connectorConfig"] | components["schemas"]["connectors.plaid.connectorConfig"] | components["schemas"]["connectors.postgres.connectorConfig"] | components["schemas"]["connectors.qbo.connectorConfig"] | components["schemas"]["connectors.ramp.connectorConfig"] | components["schemas"]["connectors.salesforce.connectorConfig"] | components["schemas"]["connectors.salesloft.connectorConfig"] | components["schemas"]["connectors.saltedge.connectorConfig"] | components["schemas"]["connectors.slack.connectorConfig"] | components["schemas"]["connectors.splitwise.connectorConfig"] | components["schemas"]["connectors.stripe.connectorConfig"] | components["schemas"]["connectors.teller.connectorConfig"] | components["schemas"]["connectors.toggl.connectorConfig"] | components["schemas"]["connectors.twenty.connectorConfig"] | components["schemas"]["connectors.venmo.connectorConfig"] | components["schemas"]["connectors.wise.connectorConfig"] | components["schemas"]["connectors.xero.connectorConfig"] | components["schemas"]["connectors.yodlee.connectorConfig"] | components["schemas"]["connectors.zohodesk.connectorConfig"] | components["schemas"]["connectors.googledrive.connectorConfig"], "connector_name"> & {
                            connector?: components["schemas"]["core.connector"];
                            integrations?: {
                                [key: string]: components["schemas"]["core.integration"];
                            };
                        })[];
                        /** @description Total number of items in the database for the organization */
                        total: number;
                        /**
                         * @description Limit the number of items returned
                         * @default 50
                         */
                        limit: number;
                        /**
                         * @description Offset the items returned
                         * @default 0
                         */
                        offset: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    listConnectors: {
        parameters: {
            query?: {
                expand?: "integrations"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": ({
                        integrations?: components["schemas"]["core.integration"][];
                    } & components["schemas"]["core.connector"])[];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    listEvents: {
        parameters: {
            query?: {
                /** @description Limit the number of items returned */
                limit?: number;
                /** @description Offset the items returned */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["core.event"][];
                        /** @description Total number of items in the database for the organization */
                        total: number;
                        /**
                         * @description Limit the number of items returned
                         * @default 50
                         */
                        limit: number;
                        /**
                         * @description Offset the items returned
                         * @default 0
                         */
                        offset: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    getOnboarding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        first_connector_configured: boolean;
                        first_connection_created: boolean;
                        api_key_used: boolean;
                        onboarding_marked_complete: boolean;
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    setOnboardingComplete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    createMagicLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the customer in your application. Ensure it is unique for that customer. */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description How long the magic link will be valid for (in seconds) before it expires
                     * @default 2592000
                     */
                    validity_in_seconds?: number;
                    /** @description Where to send user to after connect / if they press back button */
                    redirect_url?: string;
                    /**
                     * @description Filter integrations by connector names
                     * @default []
                     */
                    connector_names?: ("aircall" | "airtable" | "apollo" | "beancount" | "brex" | "coda" | "confluence" | "discord" | "finch" | "firebase" | "foreceipt" | "github" | "gong" | "google" | "greenhouse" | "heron" | "hubspot" | "intercom" | "jira" | "kustomer" | "lever" | "linear" | "lunchmoney" | "merge" | "microsoft" | "moota" | "onebrick" | "outreach" | "pipedrive" | "plaid" | "qbo" | "ramp" | "salesforce" | "salesloft" | "saltedge" | "slack" | "splitwise" | "stripe" | "teller" | "toggl" | "twenty" | "wise" | "xero" | "yodlee" | "zohodesk" | "googledrive")[];
                    /** @description The specific connection id to load */
                    connection_id?: string;
                    /**
                     * @description Magic Link display theme
                     * @default light
                     * @enum {string}
                     */
                    theme?: "light" | "dark";
                    /**
                     * @description Magic Link tab view to load in the connect magic link
                     * @default add
                     * @enum {string}
                     */
                    view?: "manage" | "manage-deeplink" | "add" | "add-deeplink";
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Connect magic link url to share with the user. */
                        magic_link_url: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    createToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the customer in your application. Ensure it is unique for that customer. */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description How long the token will be valid for (in seconds) before it expires
                     * @default 2592000
                     */
                    validity_in_seconds?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The authentication token to use for API requests */
                        token: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok: boolean;
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    healthEcho: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    viewer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        role: "customer" | "org" | "anon" | "user";
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
}
