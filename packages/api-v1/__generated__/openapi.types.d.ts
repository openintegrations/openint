/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/connector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Connectors
         * @description List all connectors to understand what integrations are available to configure
         */
        get: operations["listConnectors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connector-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Configured Connectors
         * @description List the connectors that are configured in your account and available for your customers
         */
        get: operations["listConnectorConfigs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/connection/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Connection
         * @description Get details of a specific connection, including credentials
         */
        get: operations["getConnection"];
        put?: never;
        post?: never;
        /**
         * Delete Connection
         * @description Delete a connection
         */
        delete: operations["deleteConnection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/connection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Connections
         * @description List all connections with optional filtering. Does not retrieve secrets or perform any connection healthcheck. For that use `getConnection` or `checkConnectionHealth`.
         */
        get: operations["listConnections"];
        put?: never;
        /**
         * Create Connection
         * @description Import an existing connection after validation
         */
        post: operations["createConnection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/connection/${string}/check`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Connection Health
         * @description Verify that a connection is healthy
         */
        post: operations["checkConnection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/customer/${string}/magic-link`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Magic Link
         * @description Create a @Connect magic link that is ready to be shared with customers who want to use @Connect
         */
        post: operations["createMagicLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/customer/${string}/token`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Customer Authentication Token
         * @description Create a @Connect authentication token for a customer. This token can be used to embed @Connect in your application via the `@openint/connect` npm package.
         */
        post: operations["createToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Check if the API is operational
         */
        get: operations["health"];
        put?: never;
        post: operations["healthEcho"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/viewer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get information about the current authenticated user
         */
        get: operations["viewer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    [path: `/webhook/${string}`]: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Handle a webhook event */
        post: operations["handleWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AuthMode
         * @enum {string}
         */
        AuthMode: "OAUTH2" | "OAUTH1" | "BASIC" | "API_KEY";
        /** acme-oauth2 */
        "connector.acme-oauth2.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "acme-oauth2";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** acme-oauth2 */
        "connector.acme-oauth2.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "acme-oauth2";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** aircall */
        "connector.aircall.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "aircall";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** aircall */
        "connector.aircall.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "aircall";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** airtable */
        "connector.airtable.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "airtable";
            settings: {
                apiKey: string;
                airtableBase: string;
            };
        };
        /** airtable */
        "connector.airtable.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "airtable";
            config: Record<string, never>;
        };
        /** apollo */
        "connector.apollo.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "apollo";
            settings: {
                oauth: {
                    credentials: {
                        type: components["schemas"]["AuthMode"];
                        api_key?: string | null;
                        access_token?: string;
                        refresh_token?: string;
                        /** Format: date-time */
                        expires_at?: string;
                        raw: {
                            access_token: string;
                            expires_in?: number;
                            /** Format: date-time */
                            expires_at?: string;
                            refresh_token?: string | null;
                            refresh_token_expires_in?: number | null;
                            token_type?: string | null;
                            scope?: string;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                    connection_config?: ({
                        portalId?: number | null;
                        instance_url?: string | null;
                    } & {
                        [key: string]: unknown;
                    }) | null;
                    metadata: {
                        [key: string]: unknown;
                    } | null;
                };
                error?: {
                    code: "refresh_token_external_error" | string;
                    message?: string | null;
                } | null;
            };
        };
        /** apollo */
        "connector.apollo.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "apollo";
            config: Record<string, never>;
        };
        /** brex */
        "connector.brex.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "brex";
            settings: {
                accessToken: string;
            };
        };
        /** brex */
        "connector.brex.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "brex";
            config: {
                /** @description Oauth support */
                oauth?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /** @description API key auth support */
                apikeyAuth?: boolean;
            };
        };
        /** coda */
        "connector.coda.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "coda";
            settings: {
                apiKey: string;
            };
        };
        /** coda */
        "connector.coda.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "coda";
            config: Record<string, never>;
        };
        /** confluence */
        "connector.confluence.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "confluence";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** confluence */
        "connector.confluence.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "confluence";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** discord */
        "connector.discord.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "discord";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** discord */
        "connector.discord.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "discord";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** facebook */
        "connector.facebook.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "facebook";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** facebook */
        "connector.facebook.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "facebook";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** finch */
        "connector.finch.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "finch";
            settings: {
                access_token: string;
            };
        };
        /** finch */
        "connector.finch.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "finch";
            config: {
                client_id: string;
                client_secret: string;
                /** @description Finch API version */
                api_version?: string;
                /** @description Finch products to access, @see https://developer.tryfinch.com/api-reference/development-guides/Permissions */
                products: ("company" | "directory" | "individual" | "ssn" | "employment" | "payment" | "pay_statement" | "benefits")[];
            };
        };
        /** firebase */
        "connector.firebase.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "firebase";
            settings: {
                /** @constant */
                role: "admin";
                serviceAccount: {
                    project_id: string;
                } & {
                    [key: string]: unknown;
                };
            } | {
                /** @constant */
                role: "user";
                firebaseConfig: {
                    projectId: string;
                    apiKey: string;
                    appId: string;
                    authDomain: string;
                    databaseURL: string;
                    storageBucket?: string;
                    measurementId?: string;
                    messagingSenderId?: string;
                };
                authData: {
                    /** @constant */
                    method: "userJson";
                    userJson: {
                        uid: string;
                        appName: string;
                        stsTokenManager: {
                            [key: string]: unknown;
                        };
                    } & {
                        [key: string]: unknown;
                    };
                } | {
                    /** @constant */
                    method: "customToken";
                    customToken: string;
                } | {
                    /** @constant */
                    method: "emailPassword";
                    email: string;
                    password: string;
                };
            };
        };
        /** firebase */
        "connector.firebase.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "firebase";
            config: Record<string, never>;
        };
        /** foreceipt */
        "connector.foreceipt.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "foreceipt";
            settings: {
                credentials?: unknown;
                _id?: unknown;
                /** @enum {string} */
                envName: "staging" | "production";
            };
        };
        /** foreceipt */
        "connector.foreceipt.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "foreceipt";
            config: Record<string, never>;
        };
        /** github */
        "connector.github.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "github";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** github */
        "connector.github.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "github";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** gong */
        "connector.gong.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "gong";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
                /** @description The base URL of your Gong account (e.g., example) */
                api_base_url_for_customer: string;
            };
        };
        /** gong */
        "connector.gong.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "gong";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** google-calendar */
        "connector.google-calendar.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-calendar";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** google-calendar */
        "connector.google-calendar.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-calendar";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** google-docs */
        "connector.google-docs.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-docs";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** google-docs */
        "connector.google-docs.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-docs";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** google-drive */
        "connector.google-drive.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-drive";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** google-drive */
        "connector.google-drive.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-drive";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** google-mail */
        "connector.google-mail.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-mail";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** google-mail */
        "connector.google-mail.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-mail";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** google-sheet */
        "connector.google-sheet.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-sheet";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** google-sheet */
        "connector.google-sheet.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "google-sheet";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** greenhouse */
        "connector.greenhouse.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "greenhouse";
            settings: {
                apiKey: string;
            };
        };
        /** greenhouse */
        "connector.greenhouse.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "greenhouse";
            config: Record<string, never>;
        };
        /** heron */
        "connector.heron.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "heron";
            settings: Record<string, never>;
        };
        /** heron */
        "connector.heron.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "heron";
            config: {
                apiKey: string;
            };
        };
        /** hubspot */
        "connector.hubspot.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "hubspot";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** hubspot */
        "connector.hubspot.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "hubspot";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** instagram */
        "connector.instagram.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "instagram";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** instagram */
        "connector.instagram.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "instagram";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** intercom */
        "connector.intercom.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "intercom";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** intercom */
        "connector.intercom.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "intercom";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** jira */
        "connector.jira.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "jira";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** jira */
        "connector.jira.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "jira";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** lever */
        "connector.lever.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lever";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** lever */
        "connector.lever.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lever";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** linear */
        "connector.linear.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "linear";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** linear */
        "connector.linear.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "linear";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** linkedin */
        "connector.linkedin.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "linkedin";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** linkedin */
        "connector.linkedin.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "linkedin";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** lunchmoney */
        "connector.lunchmoney.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lunchmoney";
            settings: Record<string, never>;
        };
        /** lunchmoney */
        "connector.lunchmoney.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "lunchmoney";
            config: {
                accessToken: string;
            };
        };
        /** mercury */
        "connector.mercury.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "mercury";
            settings: Record<string, never>;
        };
        /** mercury */
        "connector.mercury.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "mercury";
            config: {
                /** @description Oauth support */
                oauth?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /** @description API key auth support */
                apikeyAuth?: boolean;
            };
        };
        /** merge */
        "connector.merge.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "merge";
            settings: {
                accountToken: string;
                accountDetails?: unknown;
            };
        };
        /** merge */
        "connector.merge.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "merge";
            config: {
                apiKey: string;
            };
        };
        /** moota */
        "connector.moota.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "moota";
            settings: Record<string, never>;
        };
        /** moota */
        "connector.moota.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "moota";
            config: {
                token: string;
            };
        };
        /** notion */
        "connector.notion.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "notion";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** notion */
        "connector.notion.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "notion";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** onebrick */
        "connector.onebrick.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "onebrick";
            settings: {
                accessToken: string;
            };
        };
        /** onebrick */
        "connector.onebrick.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "onebrick";
            config: {
                /** @enum {string} */
                envName: "sandbox" | "production";
                clientId: string;
                clientSecret: string;
                publicToken: string;
                accessToken?: string | null;
                redirectUrl?: string | null;
            };
        };
        /** outreach */
        "connector.outreach.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "outreach";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** outreach */
        "connector.outreach.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "outreach";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** pipedrive */
        "connector.pipedrive.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "pipedrive";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
                /** @description The API URL of your Pipedrive account (e.g., example) */
                api_domain: string;
            };
        };
        /** pipedrive */
        "connector.pipedrive.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "pipedrive";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** plaid */
        "connector.plaid.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "plaid";
            settings: {
                itemId?: string | null;
                accessToken: string;
                institution?: unknown;
                item?: unknown;
                status?: unknown;
                webhookItemError?: null;
            };
        };
        /** plaid */
        "connector.plaid.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "plaid";
            config: {
                /** @enum {string} */
                envName: "sandbox" | "development" | "production";
                credentials?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /**
                 * @description The name of your application, as it should be displayed in Link.
                 *             Maximum length of 30 characters.
                 *             If a value longer than 30 characters is provided, Link will display "This Application" instead.
                 * @default This Application
                 */
                clientName: string;
                /** @default [
                 *       "transactions"
                 *     ] */
                products: ("assets" | "auth" | "balance" | "identity" | "investments" | "liabilities" | "payment_initiation" | "identity_verification" | "transactions" | "credit_details" | "income" | "income_verification" | "deposit_switch" | "standing_orders" | "transfer" | "employment" | "recurring_transactions")[];
                /** @default [
                 *       "US",
                 *       "CA"
                 *     ] */
                countryCodes: ("US" | "GB" | "ES" | "NL" | "FR" | "IE" | "CA" | "DE" | "IT" | "PL" | "DK" | "NO" | "SE" | "EE" | "LT" | "LV")[];
                /**
                 * @default en
                 * @enum {string}
                 */
                language: "en" | "fr" | "es" | "nl" | "de";
            };
        };
        /** postgres */
        "connector.postgres.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "postgres";
            settings: {
                databaseURL: string;
                sourceQueries?: {
                    /** @description Should order by lastModifiedAt and id descending */
                    invoice?: string | null;
                };
            };
        };
        /** postgres */
        "connector.postgres.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "postgres";
            config: Record<string, never>;
        };
        /** quickbooks */
        "connector.quickbooks.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "quickbooks";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
                /** @description The realmId of your quickbooks company (e.g., 9341453474484455) */
                realmId: string;
            };
        };
        /** quickbooks */
        "connector.quickbooks.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "quickbooks";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
                /**
                 * @default sandbox
                 * @enum {string}
                 */
                envName: "sandbox" | "production";
            };
        };
        /** ramp */
        "connector.ramp.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "ramp";
            settings: {
                accessToken?: string | null;
                startAfterTransactionId?: string | null;
            };
        };
        /** ramp */
        "connector.ramp.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "ramp";
            config: {
                oauth: {
                    clientId: string;
                    clientSecret: string;
                };
            };
        };
        /** reddit */
        "connector.reddit.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "reddit";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** reddit */
        "connector.reddit.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "reddit";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** salesloft */
        "connector.salesloft.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "salesloft";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** salesloft */
        "connector.salesloft.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "salesloft";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** saltedge */
        "connector.saltedge.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "saltedge";
            settings?: unknown;
        };
        /** saltedge */
        "connector.saltedge.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "saltedge";
            config: {
                appId: string;
                secret: string;
                url?: string | null;
            };
        };
        /** sharepointonline */
        "connector.sharepointonline.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "sharepointonline";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** sharepointonline */
        "connector.sharepointonline.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "sharepointonline";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** slack */
        "connector.slack.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "slack";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** slack */
        "connector.slack.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "slack";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** splitwise */
        "connector.splitwise.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "splitwise";
            settings: {
                currentUser?: {
                    country_code: string;
                    custom_picture: boolean;
                    date_format: string;
                    default_currency: string;
                    default_group_id: number;
                    email: string;
                    first_name: string;
                    force_refresh_at: string;
                    id: number;
                    last_name: string;
                    locale: string;
                    notifications: {
                        added_as_friend: boolean;
                        added_to_group: boolean;
                        announcements: boolean;
                        bills: boolean;
                        expense_added: boolean;
                        expense_updated: boolean;
                        monthly_summary: boolean;
                        payments: boolean;
                    };
                    notifications_count: number;
                    notifications_read: string;
                    picture: {
                        original?: string | null;
                        xxlarge?: string | null;
                        xlarge?: string | null;
                        large?: string | null;
                        medium?: string | null;
                        small?: string | null;
                    };
                    registration_status: string;
                } | null;
                accessToken: string;
            };
        };
        /** splitwise */
        "connector.splitwise.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "splitwise";
            config: Record<string, never>;
        };
        /** stripe */
        "connector.stripe.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "stripe";
            settings: {
                secretKey: string;
            };
        };
        /** stripe */
        "connector.stripe.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "stripe";
            config: {
                /** @description Oauth support */
                oauth?: null | {
                    clientId: string;
                    clientSecret: string;
                };
                /** @description API key auth support */
                apikeyAuth?: boolean;
            };
        };
        /** teller */
        "connector.teller.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "teller";
            settings: {
                token: string;
            };
        };
        /** teller */
        "connector.teller.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "teller";
            config: {
                applicationId: string;
                token?: string | null;
            };
        };
        /** toggl */
        "connector.toggl.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "toggl";
            settings: {
                apiToken: string;
                email?: string | null;
                password?: string | null;
            };
        };
        /** toggl */
        "connector.toggl.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "toggl";
            config: Record<string, never>;
        };
        /** twenty */
        "connector.twenty.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "twenty";
            settings: {
                access_token: string;
            };
        };
        /** twenty */
        "connector.twenty.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "twenty";
            config: Record<string, never>;
        };
        /** twitter */
        "connector.twitter.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "twitter";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** twitter */
        "connector.twitter.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "twitter";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** venmo */
        "connector.venmo.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "venmo";
            settings: {
                me?: unknown;
                credentials?: unknown;
            };
        };
        /** venmo */
        "connector.venmo.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "venmo";
            config: {
                v1BaseURL?: string | null;
                v5BaseURL?: string | null;
                proxy?: {
                    url: string;
                    cert: string;
                } | null;
            };
        };
        /** wise */
        "connector.wise.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "wise";
            settings: {
                /** @enum {string} */
                envName: "sandbox" | "live";
                apiToken?: string | null;
            };
        };
        /** wise */
        "connector.wise.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "wise";
            config: Record<string, never>;
        };
        /** xero */
        "connector.xero.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "xero";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
            };
        };
        /** xero */
        "connector.xero.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "xero";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** yodlee */
        "connector.yodlee.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "yodlee";
            settings: {
                accessToken?: {
                    accessToken: string;
                    issuedAt: string;
                    expiresIn: number;
                } | null;
                loginName: string;
                providerAccountId: number | string;
                user?: null;
                provider?: null;
                providerAccount?: {
                    aggregationSource: string;
                    createdDate: string;
                    dataset: unknown[];
                    id: number;
                    isManual: boolean;
                    providerId: number;
                    /** @enum {string} */
                    status: "LOGIN_IN_PROGRESS" | "USER_INPUT_REQUIRED" | "IN_PROGRESS" | "PARTIAL_SUCCESS" | "SUCCESS" | "FAILED";
                    isDeleted?: boolean | null;
                } | null;
            };
        };
        /** yodlee */
        "connector.yodlee.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "yodlee";
            config: {
                /** @enum {string} */
                envName: "sandbox" | "development" | "production";
                clientId: string;
                clientSecret: string;
                adminLoginName: string;
                sandboxLoginName?: string | null;
                proxy?: {
                    url: string;
                    cert: string;
                } | null;
            };
        };
        /** zoho-desk */
        "connector.zoho-desk.discriminated_connection_settings": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "zoho-desk";
            settings: {
                oauth: {
                    /** @description Output of the postConnect hook for oauth2 connectors */
                    credentials?: {
                        access_token: string;
                        /** @description Client ID used for the connection */
                        client_id?: string;
                        scope: string;
                        refresh_token?: string;
                        expires_in?: number;
                        expires_at?: string;
                        token_type?: string;
                        raw: {
                            [key: string]: unknown;
                        };
                    };
                    created_at?: string;
                    updated_at?: string;
                    last_fetched_at?: string;
                    metadata?: {
                        [key: string]: unknown;
                    } | null;
                };
                /** @description The domain extension of your Zoho account (e.g., https://accounts.zoho.com/) */
                extension: string;
            };
        };
        /** zoho-desk */
        "connector.zoho-desk.discriminated_connector_config": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            connector_name: "zoho-desk";
            config: {
                /** @description Base oauth configuration for the connector */
                oauth: {
                    client_id?: string | null;
                    client_secret?: string | null;
                    scopes?: string[] | null;
                    redirect_uri?: string | null;
                } | null;
            };
        };
        /** connection_select */
        "core.connection_select": {
            connector_name: "core.connection_select";
        } & ({
            id: string;
            customer_id: string | null;
            connector_config_id: string;
            integration_id: string | null;
            created_at: string;
            updated_at: string;
            display_name: string | null;
            disabled: boolean | null;
            /** @description
             *       JSON object can can be used to associate arbitrary metadata to
             *       avoid needing a separate 1-1 table just for simple key values in your application.
             *       During updates this object will be shallowly merged
             *      */
            metadata?: {
                [key: string]: unknown;
            } | null;
        } & Omit<components["schemas"]["connector.acme-oauth2.discriminated_connection_settings"] | components["schemas"]["connector.aircall.discriminated_connection_settings"] | components["schemas"]["connector.confluence.discriminated_connection_settings"] | components["schemas"]["connector.discord.discriminated_connection_settings"] | components["schemas"]["connector.facebook.discriminated_connection_settings"] | components["schemas"]["connector.github.discriminated_connection_settings"] | components["schemas"]["connector.gong.discriminated_connection_settings"] | components["schemas"]["connector.google-calendar.discriminated_connection_settings"] | components["schemas"]["connector.google-docs.discriminated_connection_settings"] | components["schemas"]["connector.google-drive.discriminated_connection_settings"] | components["schemas"]["connector.google-mail.discriminated_connection_settings"] | components["schemas"]["connector.google-sheet.discriminated_connection_settings"] | components["schemas"]["connector.hubspot.discriminated_connection_settings"] | components["schemas"]["connector.instagram.discriminated_connection_settings"] | components["schemas"]["connector.intercom.discriminated_connection_settings"] | components["schemas"]["connector.jira.discriminated_connection_settings"] | components["schemas"]["connector.lever.discriminated_connection_settings"] | components["schemas"]["connector.linear.discriminated_connection_settings"] | components["schemas"]["connector.linkedin.discriminated_connection_settings"] | components["schemas"]["connector.notion.discriminated_connection_settings"] | components["schemas"]["connector.outreach.discriminated_connection_settings"] | components["schemas"]["connector.pipedrive.discriminated_connection_settings"] | components["schemas"]["connector.quickbooks.discriminated_connection_settings"] | components["schemas"]["connector.reddit.discriminated_connection_settings"] | components["schemas"]["connector.salesloft.discriminated_connection_settings"] | components["schemas"]["connector.sharepointonline.discriminated_connection_settings"] | components["schemas"]["connector.slack.discriminated_connection_settings"] | components["schemas"]["connector.twitter.discriminated_connection_settings"] | components["schemas"]["connector.xero.discriminated_connection_settings"] | components["schemas"]["connector.zoho-desk.discriminated_connection_settings"] | components["schemas"]["connector.airtable.discriminated_connection_settings"] | components["schemas"]["connector.apollo.discriminated_connection_settings"] | components["schemas"]["connector.brex.discriminated_connection_settings"] | components["schemas"]["connector.coda.discriminated_connection_settings"] | components["schemas"]["connector.finch.discriminated_connection_settings"] | components["schemas"]["connector.firebase.discriminated_connection_settings"] | components["schemas"]["connector.foreceipt.discriminated_connection_settings"] | components["schemas"]["connector.greenhouse.discriminated_connection_settings"] | components["schemas"]["connector.heron.discriminated_connection_settings"] | components["schemas"]["connector.lunchmoney.discriminated_connection_settings"] | components["schemas"]["connector.mercury.discriminated_connection_settings"] | components["schemas"]["connector.merge.discriminated_connection_settings"] | components["schemas"]["connector.moota.discriminated_connection_settings"] | components["schemas"]["connector.onebrick.discriminated_connection_settings"] | components["schemas"]["connector.plaid.discriminated_connection_settings"] | components["schemas"]["connector.postgres.discriminated_connection_settings"] | components["schemas"]["connector.ramp.discriminated_connection_settings"] | components["schemas"]["connector.saltedge.discriminated_connection_settings"] | components["schemas"]["connector.splitwise.discriminated_connection_settings"] | components["schemas"]["connector.stripe.discriminated_connection_settings"] | components["schemas"]["connector.teller.discriminated_connection_settings"] | components["schemas"]["connector.toggl.discriminated_connection_settings"] | components["schemas"]["connector.twenty.discriminated_connection_settings"] | components["schemas"]["connector.venmo.discriminated_connection_settings"] | components["schemas"]["connector.wise.discriminated_connection_settings"] | components["schemas"]["connector.yodlee.discriminated_connection_settings"], "connector_name">);
        /** Connector */
        "core.connector": {
            name: string;
            display_name?: string;
            logo_url?: string;
            /** @enum {string} */
            stage?: "alpha" | "beta" | "ga" | "hidden";
            platforms?: ("web" | "mobile" | "desktop" | "local" | "cloud")[];
            schemas?: {
                connector_config?: unknown;
                connection_settings?: unknown;
                integration_data?: unknown;
                webhook_input?: unknown;
                pre_connect_input?: unknown;
                connect_input?: unknown;
                connect_output?: unknown;
            };
            /** @enum {string} */
            authType?: "BASIC" | "OAUTH1" | "OAUTH2" | "OAUTH2CC" | "API_KEY" | "CUSTOM";
            openint_scopes?: string[];
            scopes?: {
                scope: string;
                display_name?: string;
                description?: string;
            }[];
        };
        /**
         * connector
         * @enum {string}
         */
        "core.connector.name": "acme-oauth2" | "aircall" | "airtable" | "apollo" | "brex" | "coda" | "confluence" | "discord" | "facebook" | "finch" | "firebase" | "foreceipt" | "github" | "gong" | "google-calendar" | "google-docs" | "google-drive" | "google-mail" | "google-sheet" | "greenhouse" | "heron" | "hubspot" | "instagram" | "intercom" | "jira" | "lever" | "linear" | "linkedin" | "lunchmoney" | "mercury" | "merge" | "moota" | "notion" | "onebrick" | "outreach" | "pipedrive" | "plaid" | "postgres" | "quickbooks" | "ramp" | "reddit" | "salesloft" | "saltedge" | "sharepointonline" | "slack" | "splitwise" | "stripe" | "teller" | "toggl" | "twenty" | "twitter" | "venmo" | "wise" | "xero" | "yodlee" | "zoho-desk";
        /** integration_select */
        "core.integration_select": {
            id: string;
            standard: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | unknown[];
            external: (string | number | boolean | null) | {
                [key: string]: unknown;
            } | unknown[];
            created_at: string;
            updated_at: string;
            connector_name: components["schemas"]["core.connector.name"];
            name: string;
            logo_url?: string | null;
            /** @enum {string|null} */
            stage?: "alpha" | "beta" | "ga" | null;
            platforms?: ("web" | "mobile" | "desktop")[] | null;
            category?: string | null;
            auth_type?: string | null;
            version?: string | null;
        };
        /**
         * Invalid input data error (400)
         * @description The error information
         * @example {
         *       "code": "BAD_REQUEST",
         *       "message": "Invalid input data",
         *       "issues": []
         *     }
         */
        "error.BAD_REQUEST": {
            /**
             * @description The error message
             * @example Invalid input data
             */
            message: string;
            /**
             * @description The error code
             * @example BAD_REQUEST
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Insufficient access error (403)
         * @description The error information
         * @example {
         *       "code": "FORBIDDEN",
         *       "message": "Insufficient access",
         *       "issues": []
         *     }
         */
        "error.FORBIDDEN": {
            /**
             * @description The error message
             * @example Insufficient access
             */
            message: string;
            /**
             * @description The error code
             * @example FORBIDDEN
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Internal server error error (500)
         * @description The error information
         * @example {
         *       "code": "INTERNAL_SERVER_ERROR",
         *       "message": "Internal server error",
         *       "issues": []
         *     }
         */
        "error.INTERNAL_SERVER_ERROR": {
            /**
             * @description The error message
             * @example Internal server error
             */
            message: string;
            /**
             * @description The error code
             * @example INTERNAL_SERVER_ERROR
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Not found error (404)
         * @description The error information
         * @example {
         *       "code": "NOT_FOUND",
         *       "message": "Not found",
         *       "issues": []
         *     }
         */
        "error.NOT_FOUND": {
            /**
             * @description The error message
             * @example Not found
             */
            message: string;
            /**
             * @description The error code
             * @example NOT_FOUND
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
        /**
         * Authorization not provided error (401)
         * @description The error information
         * @example {
         *       "code": "UNAUTHORIZED",
         *       "message": "Authorization not provided",
         *       "issues": []
         *     }
         */
        "error.UNAUTHORIZED": {
            /**
             * @description The error message
             * @example Authorization not provided
             */
            message: string;
            /**
             * @description The error code
             * @example UNAUTHORIZED
             */
            code: string;
            /**
             * @description An array of issues that were responsible for the error
             * @example []
             */
            issues?: {
                message: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listConnectors: {
        parameters: {
            query?: {
                expand?: "schemas"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            integrations?: components["schemas"]["core.integration_select"][];
                        } & components["schemas"]["core.connector"])[];
                        /** @description Total number of items in the database for the organization */
                        total: number;
                        /**
                         * @description Limit the number of items returned
                         * @default 50
                         */
                        limit: number;
                        /**
                         * @description Offset the items returned
                         * @default 0
                         */
                        offset: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    listConnectorConfigs: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                expand?: ("connector" | "connector.schemas" | "connection_count")[];
                connector_names?: components["schemas"]["core.connector.name"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            id: string;
                            created_at: string;
                            updated_at: string;
                            org_id: string;
                            display_name: string | null;
                            disabled: boolean | null;
                            /** @description
                             *       JSON object can can be used to associate arbitrary metadata to
                             *       avoid needing a separate 1-1 table just for simple key values in your application.
                             *       During updates this object will be shallowly merged
                             *      */
                            metadata?: {
                                [key: string]: unknown;
                            } | null;
                        } & Omit<components["schemas"]["connector.acme-oauth2.discriminated_connector_config"] | components["schemas"]["connector.aircall.discriminated_connector_config"] | components["schemas"]["connector.confluence.discriminated_connector_config"] | components["schemas"]["connector.discord.discriminated_connector_config"] | components["schemas"]["connector.facebook.discriminated_connector_config"] | components["schemas"]["connector.github.discriminated_connector_config"] | components["schemas"]["connector.gong.discriminated_connector_config"] | components["schemas"]["connector.google-calendar.discriminated_connector_config"] | components["schemas"]["connector.google-docs.discriminated_connector_config"] | components["schemas"]["connector.google-drive.discriminated_connector_config"] | components["schemas"]["connector.google-mail.discriminated_connector_config"] | components["schemas"]["connector.google-sheet.discriminated_connector_config"] | components["schemas"]["connector.hubspot.discriminated_connector_config"] | components["schemas"]["connector.instagram.discriminated_connector_config"] | components["schemas"]["connector.intercom.discriminated_connector_config"] | components["schemas"]["connector.jira.discriminated_connector_config"] | components["schemas"]["connector.lever.discriminated_connector_config"] | components["schemas"]["connector.linear.discriminated_connector_config"] | components["schemas"]["connector.linkedin.discriminated_connector_config"] | components["schemas"]["connector.notion.discriminated_connector_config"] | components["schemas"]["connector.outreach.discriminated_connector_config"] | components["schemas"]["connector.pipedrive.discriminated_connector_config"] | components["schemas"]["connector.quickbooks.discriminated_connector_config"] | components["schemas"]["connector.reddit.discriminated_connector_config"] | components["schemas"]["connector.salesloft.discriminated_connector_config"] | components["schemas"]["connector.sharepointonline.discriminated_connector_config"] | components["schemas"]["connector.slack.discriminated_connector_config"] | components["schemas"]["connector.twitter.discriminated_connector_config"] | components["schemas"]["connector.xero.discriminated_connector_config"] | components["schemas"]["connector.zoho-desk.discriminated_connector_config"] | components["schemas"]["connector.airtable.discriminated_connector_config"] | components["schemas"]["connector.apollo.discriminated_connector_config"] | components["schemas"]["connector.brex.discriminated_connector_config"] | components["schemas"]["connector.coda.discriminated_connector_config"] | components["schemas"]["connector.finch.discriminated_connector_config"] | components["schemas"]["connector.firebase.discriminated_connector_config"] | components["schemas"]["connector.foreceipt.discriminated_connector_config"] | components["schemas"]["connector.greenhouse.discriminated_connector_config"] | components["schemas"]["connector.heron.discriminated_connector_config"] | components["schemas"]["connector.lunchmoney.discriminated_connector_config"] | components["schemas"]["connector.mercury.discriminated_connector_config"] | components["schemas"]["connector.merge.discriminated_connector_config"] | components["schemas"]["connector.moota.discriminated_connector_config"] | components["schemas"]["connector.onebrick.discriminated_connector_config"] | components["schemas"]["connector.plaid.discriminated_connector_config"] | components["schemas"]["connector.postgres.discriminated_connector_config"] | components["schemas"]["connector.ramp.discriminated_connector_config"] | components["schemas"]["connector.saltedge.discriminated_connector_config"] | components["schemas"]["connector.splitwise.discriminated_connector_config"] | components["schemas"]["connector.stripe.discriminated_connector_config"] | components["schemas"]["connector.teller.discriminated_connector_config"] | components["schemas"]["connector.toggl.discriminated_connector_config"] | components["schemas"]["connector.twenty.discriminated_connector_config"] | components["schemas"]["connector.venmo.discriminated_connector_config"] | components["schemas"]["connector.wise.discriminated_connector_config"] | components["schemas"]["connector.yodlee.discriminated_connector_config"], "connector_name"> & {
                            connector?: components["schemas"]["core.connector"];
                            integrations?: {
                                [key: string]: components["schemas"]["core.integration_select"];
                            };
                            connection_count?: number;
                        })[];
                        /** @description Total number of items in the database for the organization */
                        total: number;
                        /**
                         * @description Limit the number of items returned
                         * @default 50
                         */
                        limit: number;
                        /**
                         * @description Offset the items returned
                         * @default 0
                         */
                        offset: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    getConnection: {
        parameters: {
            query?: {
                /** @description Controls secret inclusion: none (default), basic (auth only), or all secrets */
                include_secrets?: "none" | "basic" | "all";
                /** @description Controls credential refresh: none (never), force (always), or auto (when expired, default) */
                refresh_policy?: "none" | "force" | "auto";
                expand?: "connector"[];
            };
            header?: never;
            path: {
                /** @description The id of the connection, starts with `conn_` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                        customer_id: string | null;
                        connector_config_id: string;
                        integration_id: string | null;
                        created_at: string;
                        updated_at: string;
                        display_name: string | null;
                        disabled: boolean | null;
                        /** @description
                         *       JSON object can can be used to associate arbitrary metadata to
                         *       avoid needing a separate 1-1 table just for simple key values in your application.
                         *       During updates this object will be shallowly merged
                         *      */
                        metadata?: {
                            [key: string]: unknown;
                        } | null;
                    } & Omit<components["schemas"]["connector.acme-oauth2.discriminated_connection_settings"] | components["schemas"]["connector.aircall.discriminated_connection_settings"] | components["schemas"]["connector.confluence.discriminated_connection_settings"] | components["schemas"]["connector.discord.discriminated_connection_settings"] | components["schemas"]["connector.facebook.discriminated_connection_settings"] | components["schemas"]["connector.github.discriminated_connection_settings"] | components["schemas"]["connector.gong.discriminated_connection_settings"] | components["schemas"]["connector.google-calendar.discriminated_connection_settings"] | components["schemas"]["connector.google-docs.discriminated_connection_settings"] | components["schemas"]["connector.google-drive.discriminated_connection_settings"] | components["schemas"]["connector.google-mail.discriminated_connection_settings"] | components["schemas"]["connector.google-sheet.discriminated_connection_settings"] | components["schemas"]["connector.hubspot.discriminated_connection_settings"] | components["schemas"]["connector.instagram.discriminated_connection_settings"] | components["schemas"]["connector.intercom.discriminated_connection_settings"] | components["schemas"]["connector.jira.discriminated_connection_settings"] | components["schemas"]["connector.lever.discriminated_connection_settings"] | components["schemas"]["connector.linear.discriminated_connection_settings"] | components["schemas"]["connector.linkedin.discriminated_connection_settings"] | components["schemas"]["connector.notion.discriminated_connection_settings"] | components["schemas"]["connector.outreach.discriminated_connection_settings"] | components["schemas"]["connector.pipedrive.discriminated_connection_settings"] | components["schemas"]["connector.quickbooks.discriminated_connection_settings"] | components["schemas"]["connector.reddit.discriminated_connection_settings"] | components["schemas"]["connector.salesloft.discriminated_connection_settings"] | components["schemas"]["connector.sharepointonline.discriminated_connection_settings"] | components["schemas"]["connector.slack.discriminated_connection_settings"] | components["schemas"]["connector.twitter.discriminated_connection_settings"] | components["schemas"]["connector.xero.discriminated_connection_settings"] | components["schemas"]["connector.zoho-desk.discriminated_connection_settings"] | components["schemas"]["connector.airtable.discriminated_connection_settings"] | components["schemas"]["connector.apollo.discriminated_connection_settings"] | components["schemas"]["connector.brex.discriminated_connection_settings"] | components["schemas"]["connector.coda.discriminated_connection_settings"] | components["schemas"]["connector.finch.discriminated_connection_settings"] | components["schemas"]["connector.firebase.discriminated_connection_settings"] | components["schemas"]["connector.foreceipt.discriminated_connection_settings"] | components["schemas"]["connector.greenhouse.discriminated_connection_settings"] | components["schemas"]["connector.heron.discriminated_connection_settings"] | components["schemas"]["connector.lunchmoney.discriminated_connection_settings"] | components["schemas"]["connector.mercury.discriminated_connection_settings"] | components["schemas"]["connector.merge.discriminated_connection_settings"] | components["schemas"]["connector.moota.discriminated_connection_settings"] | components["schemas"]["connector.onebrick.discriminated_connection_settings"] | components["schemas"]["connector.plaid.discriminated_connection_settings"] | components["schemas"]["connector.postgres.discriminated_connection_settings"] | components["schemas"]["connector.ramp.discriminated_connection_settings"] | components["schemas"]["connector.saltedge.discriminated_connection_settings"] | components["schemas"]["connector.splitwise.discriminated_connection_settings"] | components["schemas"]["connector.stripe.discriminated_connection_settings"] | components["schemas"]["connector.teller.discriminated_connection_settings"] | components["schemas"]["connector.toggl.discriminated_connection_settings"] | components["schemas"]["connector.twenty.discriminated_connection_settings"] | components["schemas"]["connector.venmo.discriminated_connection_settings"] | components["schemas"]["connector.wise.discriminated_connection_settings"] | components["schemas"]["connector.yodlee.discriminated_connection_settings"], "connector_name"> & {
                        connector?: components["schemas"]["core.connector"];
                        /**
                         * @description Connection status: healthy (all well), disconnected (needs reconnection), error (system issue), manual (import connection)
                         * @enum {string}
                         */
                        status?: "healthy" | "disconnected" | "error" | "manual";
                        integration?: components["schemas"]["core.integration_select"];
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    deleteConnection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the connection, starts with `conn_` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The id of the connection, starts with `conn_` */
                        id: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    listConnections: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                connector_names?: components["schemas"]["core.connector.name"][];
                /** @description The id of the customer in your application. Ensure it is unique for that customer. */
                customer_id?: string;
                /** @description The id of the connector config, starts with `ccfg_` */
                connector_config_id?: string;
                /** @description Controls secret inclusion: none (default), basic (auth only), or all secrets */
                include_secrets?: "none" | "basic" | "all";
                expand?: "connector"[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: ({
                            id: string;
                            customer_id: string | null;
                            connector_config_id: string;
                            integration_id: string | null;
                            created_at: string;
                            updated_at: string;
                            display_name: string | null;
                            disabled: boolean | null;
                            /** @description
                             *       JSON object can can be used to associate arbitrary metadata to
                             *       avoid needing a separate 1-1 table just for simple key values in your application.
                             *       During updates this object will be shallowly merged
                             *      */
                            metadata?: {
                                [key: string]: unknown;
                            } | null;
                        } & Omit<components["schemas"]["connector.acme-oauth2.discriminated_connection_settings"] | components["schemas"]["connector.aircall.discriminated_connection_settings"] | components["schemas"]["connector.confluence.discriminated_connection_settings"] | components["schemas"]["connector.discord.discriminated_connection_settings"] | components["schemas"]["connector.facebook.discriminated_connection_settings"] | components["schemas"]["connector.github.discriminated_connection_settings"] | components["schemas"]["connector.gong.discriminated_connection_settings"] | components["schemas"]["connector.google-calendar.discriminated_connection_settings"] | components["schemas"]["connector.google-docs.discriminated_connection_settings"] | components["schemas"]["connector.google-drive.discriminated_connection_settings"] | components["schemas"]["connector.google-mail.discriminated_connection_settings"] | components["schemas"]["connector.google-sheet.discriminated_connection_settings"] | components["schemas"]["connector.hubspot.discriminated_connection_settings"] | components["schemas"]["connector.instagram.discriminated_connection_settings"] | components["schemas"]["connector.intercom.discriminated_connection_settings"] | components["schemas"]["connector.jira.discriminated_connection_settings"] | components["schemas"]["connector.lever.discriminated_connection_settings"] | components["schemas"]["connector.linear.discriminated_connection_settings"] | components["schemas"]["connector.linkedin.discriminated_connection_settings"] | components["schemas"]["connector.notion.discriminated_connection_settings"] | components["schemas"]["connector.outreach.discriminated_connection_settings"] | components["schemas"]["connector.pipedrive.discriminated_connection_settings"] | components["schemas"]["connector.quickbooks.discriminated_connection_settings"] | components["schemas"]["connector.reddit.discriminated_connection_settings"] | components["schemas"]["connector.salesloft.discriminated_connection_settings"] | components["schemas"]["connector.sharepointonline.discriminated_connection_settings"] | components["schemas"]["connector.slack.discriminated_connection_settings"] | components["schemas"]["connector.twitter.discriminated_connection_settings"] | components["schemas"]["connector.xero.discriminated_connection_settings"] | components["schemas"]["connector.zoho-desk.discriminated_connection_settings"] | components["schemas"]["connector.airtable.discriminated_connection_settings"] | components["schemas"]["connector.apollo.discriminated_connection_settings"] | components["schemas"]["connector.brex.discriminated_connection_settings"] | components["schemas"]["connector.coda.discriminated_connection_settings"] | components["schemas"]["connector.finch.discriminated_connection_settings"] | components["schemas"]["connector.firebase.discriminated_connection_settings"] | components["schemas"]["connector.foreceipt.discriminated_connection_settings"] | components["schemas"]["connector.greenhouse.discriminated_connection_settings"] | components["schemas"]["connector.heron.discriminated_connection_settings"] | components["schemas"]["connector.lunchmoney.discriminated_connection_settings"] | components["schemas"]["connector.mercury.discriminated_connection_settings"] | components["schemas"]["connector.merge.discriminated_connection_settings"] | components["schemas"]["connector.moota.discriminated_connection_settings"] | components["schemas"]["connector.onebrick.discriminated_connection_settings"] | components["schemas"]["connector.plaid.discriminated_connection_settings"] | components["schemas"]["connector.postgres.discriminated_connection_settings"] | components["schemas"]["connector.ramp.discriminated_connection_settings"] | components["schemas"]["connector.saltedge.discriminated_connection_settings"] | components["schemas"]["connector.splitwise.discriminated_connection_settings"] | components["schemas"]["connector.stripe.discriminated_connection_settings"] | components["schemas"]["connector.teller.discriminated_connection_settings"] | components["schemas"]["connector.toggl.discriminated_connection_settings"] | components["schemas"]["connector.twenty.discriminated_connection_settings"] | components["schemas"]["connector.venmo.discriminated_connection_settings"] | components["schemas"]["connector.wise.discriminated_connection_settings"] | components["schemas"]["connector.yodlee.discriminated_connection_settings"], "connector_name"> & {
                            connector?: components["schemas"]["core.connector"];
                            /**
                             * @description Connection status: healthy (all well), disconnected (needs reconnection), error (system issue), manual (import connection)
                             * @enum {string}
                             */
                            status?: "healthy" | "disconnected" | "error" | "manual";
                            integration?: components["schemas"]["core.integration_select"];
                        })[];
                        /** @description Total number of items in the database for the organization */
                        total: number;
                        /**
                         * @description Limit the number of items returned
                         * @default 50
                         */
                        limit: number;
                        /**
                         * @description Offset the items returned
                         * @default 0
                         */
                        offset: number;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.NOT_FOUND"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    createConnection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The id of the connector config, starts with `ccfg_` */
                    connector_config_id: string;
                    metadata?: {
                        [key: string]: unknown;
                    };
                    /** @description The id of the customer in your application. Ensure it is unique for that customer. */
                    customer_id: string;
                    /** @description Connector specific data */
                    data: components["schemas"]["connector.acme-oauth2.discriminated_connection_settings"] | components["schemas"]["connector.aircall.discriminated_connection_settings"] | components["schemas"]["connector.confluence.discriminated_connection_settings"] | components["schemas"]["connector.discord.discriminated_connection_settings"] | components["schemas"]["connector.facebook.discriminated_connection_settings"] | components["schemas"]["connector.github.discriminated_connection_settings"] | components["schemas"]["connector.gong.discriminated_connection_settings"] | components["schemas"]["connector.google-calendar.discriminated_connection_settings"] | components["schemas"]["connector.google-docs.discriminated_connection_settings"] | components["schemas"]["connector.google-drive.discriminated_connection_settings"] | components["schemas"]["connector.google-mail.discriminated_connection_settings"] | components["schemas"]["connector.google-sheet.discriminated_connection_settings"] | components["schemas"]["connector.hubspot.discriminated_connection_settings"] | components["schemas"]["connector.instagram.discriminated_connection_settings"] | components["schemas"]["connector.intercom.discriminated_connection_settings"] | components["schemas"]["connector.jira.discriminated_connection_settings"] | components["schemas"]["connector.lever.discriminated_connection_settings"] | components["schemas"]["connector.linear.discriminated_connection_settings"] | components["schemas"]["connector.linkedin.discriminated_connection_settings"] | components["schemas"]["connector.notion.discriminated_connection_settings"] | components["schemas"]["connector.outreach.discriminated_connection_settings"] | components["schemas"]["connector.pipedrive.discriminated_connection_settings"] | components["schemas"]["connector.quickbooks.discriminated_connection_settings"] | components["schemas"]["connector.reddit.discriminated_connection_settings"] | components["schemas"]["connector.salesloft.discriminated_connection_settings"] | components["schemas"]["connector.sharepointonline.discriminated_connection_settings"] | components["schemas"]["connector.slack.discriminated_connection_settings"] | components["schemas"]["connector.twitter.discriminated_connection_settings"] | components["schemas"]["connector.xero.discriminated_connection_settings"] | components["schemas"]["connector.zoho-desk.discriminated_connection_settings"] | components["schemas"]["connector.airtable.discriminated_connection_settings"] | components["schemas"]["connector.apollo.discriminated_connection_settings"] | components["schemas"]["connector.brex.discriminated_connection_settings"] | components["schemas"]["connector.coda.discriminated_connection_settings"] | components["schemas"]["connector.finch.discriminated_connection_settings"] | components["schemas"]["connector.firebase.discriminated_connection_settings"] | components["schemas"]["connector.foreceipt.discriminated_connection_settings"] | components["schemas"]["connector.greenhouse.discriminated_connection_settings"] | components["schemas"]["connector.heron.discriminated_connection_settings"] | components["schemas"]["connector.lunchmoney.discriminated_connection_settings"] | components["schemas"]["connector.mercury.discriminated_connection_settings"] | components["schemas"]["connector.merge.discriminated_connection_settings"] | components["schemas"]["connector.moota.discriminated_connection_settings"] | components["schemas"]["connector.onebrick.discriminated_connection_settings"] | components["schemas"]["connector.plaid.discriminated_connection_settings"] | components["schemas"]["connector.postgres.discriminated_connection_settings"] | components["schemas"]["connector.ramp.discriminated_connection_settings"] | components["schemas"]["connector.saltedge.discriminated_connection_settings"] | components["schemas"]["connector.splitwise.discriminated_connection_settings"] | components["schemas"]["connector.stripe.discriminated_connection_settings"] | components["schemas"]["connector.teller.discriminated_connection_settings"] | components["schemas"]["connector.toggl.discriminated_connection_settings"] | components["schemas"]["connector.twenty.discriminated_connection_settings"] | components["schemas"]["connector.venmo.discriminated_connection_settings"] | components["schemas"]["connector.wise.discriminated_connection_settings"] | components["schemas"]["connector.yodlee.discriminated_connection_settings"];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["core.connection_select"];
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    checkConnection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the connection, starts with `conn_` */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The id of the connection, starts with `conn_` */
                        id: string;
                        /**
                         * @description Connection status: healthy (all well), disconnected (needs reconnection), error (system issue), manual (import connection)
                         * @enum {string}
                         */
                        status: "healthy" | "disconnected" | "error" | "manual";
                        /**
                         * @description Error types: refresh_failed and unknown_external_error
                         * @enum {string}
                         */
                        error?: "refresh_failed" | "unknown_external_error";
                        /** @description Optional expanded error message */
                        errorMessage?: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    createMagicLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique ID of the customer to create the magic link for */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description How long the magic link will be valid for (in seconds) before it expires
                     * @default 2592000
                     */
                    validity_in_seconds?: number;
                    connect_options?: {
                        /**
                         * Return URL
                         * @description Optional URL to return customers after adding a connection or if they press the Return To Organization button
                         */
                        return_url?: string;
                        /**
                         * Connector Names
                         * @description The names of the connectors to show in the connect page. If not provided, all connectors will be shown
                         */
                        connector_names?: components["schemas"]["core.connector.name"][];
                        /**
                         * Default View to load
                         * @description The default view to show when the magic link is opened. If omitted, by default it will smartly load the right view based on whether the user has connections or not
                         * @enum {string}
                         */
                        view?: "add" | "manage";
                        /**
                         * Debug
                         * @description Whether to enable debug mode
                         */
                        debug?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Connect magic link url to share with the user. */
                        magic_link_url: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    createToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique ID of the customer to create the token for */
                customer_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @default 2592000 */
                    validity_in_seconds?: number;
                    connect_options?: {
                        /**
                         * Return URL
                         * @description Optional URL to return customers after adding a connection or if they press the Return To Organization button
                         */
                        return_url?: string;
                        /**
                         * Connector Names
                         * @description The names of the connectors to show in the connect page. If not provided, all connectors will be shown
                         */
                        connector_names?: components["schemas"]["core.connector.name"][];
                        /**
                         * Default View to load
                         * @description The default view to show when the magic link is opened. If omitted, by default it will smartly load the right view based on whether the user has connections or not
                         * @enum {string}
                         */
                        view?: "add" | "manage";
                        /**
                         * Debug
                         * @description Whether to enable debug mode
                         */
                        debug?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The authentication token to use for API requests */
                        token: string;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok: boolean;
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    healthEcho: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    viewer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        role: "anon" | "customer" | "user" | "org" | "system";
                    } & {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
    handleWebhook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                connector_name: components["schemas"]["core.connector.name"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "ok" | "error";
                        info?: unknown;
                    };
                };
            };
            /** @description Invalid input data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.BAD_REQUEST"];
                };
            };
            /** @description Authorization not provided */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.UNAUTHORIZED"];
                };
            };
            /** @description Insufficient access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.FORBIDDEN"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error.INTERNAL_SERVER_ERROR"];
                };
            };
        };
    };
}
