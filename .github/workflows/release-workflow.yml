name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump (major, minor, patch)'
        required: false
        default: 'patch'
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Authenticating GitHub CLI..."
          gh auth status

      - name: Get the latest tag or set initial version
        id: get_latest_tag
        run: |
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
          else
            LATEST_TAG="v0.0.0" # Default placeholder version
          fi
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate new version
        id: calculate_version
        run: |
          VERSION=${{ env.latest_tag }}
          VERSION=${VERSION#v} # Remove 'v' prefix
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)

          if [ "$VERSION" = "0.0.0" ]; then
            # Initial version set to v0.1.0
            NEW_VERSION="v0.1.0"
          else
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            if [ "$VERSION_TYPE" = "major" ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ "$VERSION_TYPE" = "minor" ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ env.latest_tag }}" = "v0.0.0" ]; then
            CHANGES=$(git log --pretty=format:"- %s (%h) by %an")
          else
            CHANGES=$(git log ${{ env.latest_tag }}..HEAD --pretty=format:"- %s (%h) by %an")
          fi
          echo "Changes:\n$CHANGES"
          echo "changes=$CHANGES" >> $GITHUB_ENV

      - name: Summarize PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ env.latest_tag }}" = "v0.0.0" ]; then
            PRS=$(gh pr list --state merged --base main \
              --json number,title,body,author,mergedAt,labels \
              --jq '.[] | "- PR #\(.number): \(.title) by \(.author.login)\n\(.body // "No description provided.")\nLabels: \(.labels[].name // "none")\n"')
          else
            PRS=$(gh pr list --state merged --base main --search "merged:>$(git show -s --format=%ci ${{ env.latest_tag }})" \
              --json number,title,body,author,mergedAt,labels \
              --jq '.[] | "- PR #\(.number): \(.title) by \(.author.login)\n\(.body // "No description provided.")\nLabels: \(.labels[].name // "none")\n"')
          fi

          # Sanitize PR output to remove problematic formatting
          PRS=$(echo "$PRS" | sed 's/>\s\[!IMPORTANT\]//g' | sed 's/<[^>]*>//g' | sed 's/\[.*\]//g')
          echo "Sanitized PRs:\n$PRS"
          echo "prs=$PRS" >> $GITHUB_ENV

      - name: Summarize changes with GPT-4
        id: summarize
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          FULL_CHANGELOG="Changes from git log:\n\n${{ env.changes }}\n\nChanges from PRs:\n\n${{ env.prs }}"
          DATA='{
            "model": "gpt-4",
            "messages": [
              {"role": "system", "content": "You are an assistant that generates concise and clear release summaries for software projects."},
              {"role": "user", "content": "Summarize the following changes for a GitHub release:\n\n'"${FULL_CHANGELOG}"'"}
            ],
            "temperature": 0.7,
          }'
          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$DATA")
          SUMMARY=$(echo $RESPONSE | jq -r '.choices[0].message.content')
          echo "Summary: $SUMMARY"
          echo "summary=$SUMMARY" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag -a ${{ env.new_version }} -m "Release ${{ env.new_version }}"
          git push origin ${{ env.new_version }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.new_version }}" --title "Release ${{ env.new_version }}" --notes "${{ env.summary }}"
