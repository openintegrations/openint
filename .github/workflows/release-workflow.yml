name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump (major, minor, patch)'
        required: false
        default: 'patch'
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Authenticating GitHub CLI..."
          gh auth status

      - name: Get the latest tag or set initial version
        id: get_latest_tag
        run: |
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
          else
            LATEST_TAG="v0.0.0" # Default placeholder version
          fi
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate new version
        id: calculate_version
        run: |
          VERSION=${{ env.latest_tag }}
          VERSION=${VERSION#v} # Remove 'v' prefix
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          PATCH=$(echo "$VERSION" | cut -d. -f3)

          if [ "$VERSION" = "0.0.0" ]; then
            # Initial version set to v0.1.0
            NEW_VERSION="v0.1.0"
          else
            VERSION_TYPE="${{ github.event.inputs.version_type }}"
            if [ "$VERSION_TYPE" = "major" ]; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif [ "$VERSION_TYPE" = "minor" ]; then
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              PATCH=$((PATCH + 1))
            fi
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ env.latest_tag }}" = "v0.0.0" ]; then
            CHANGES=$(git log --pretty=format:"- %s (%h) by %an")
          else
            CHANGES=$(git log ${{ env.latest_tag }}..HEAD --pretty=format:"- %s (%h) by %an")
          fi
          echo "$CHANGES" > changes.txt
          echo "Changes written to changes.txt"

      - name: Fetch PR data as JSON
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ env.latest_tag }}" = "v0.0.0" ]; then
            gh pr list --state merged --base main \
              --json number,title,body,author,mergedAt,labels > prs.json
          else
            gh pr list --state merged --base main --search "merged:>$(git show -s --format=%ci ${{ env.latest_tag }})" \
              --json number,title,body,author,mergedAt,labels > prs.json
          fi
          echo "PR data saved to prs.json"

      - name: Format PR data
        run: |
          jq -r '.[] | "- PR #\(.number): \(.title) by \(.author.login)\n\(.body // "No description provided.")\nLabels: \(.labels[].name // "none")\n"' prs.json > formatted_prs.txt
          echo "Formatted PR data saved to formatted_prs.txt"

      - name: Combine changelog and PR data
        run: |
          echo "Changes from git log:\n" > full_changelog.txt
          cat changes.txt >> full_changelog.txt
          echo "\nChanges from PRs:\n" >> full_changelog.txt
          cat formatted_prs.txt >> full_changelog.txt
          echo "Combined changelog written to full_changelog.txt"

      - name: Summarize changes with GPT-4
        id: summarize
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          FULL_CHANGELOG=$(cat full_changelog.txt)

          echo "===== Input to GPT-4 ====="
          echo "$FULL_CHANGELOG"

          # Escape FULL_CHANGELOG for JSON
          ESCAPED_CHANGELOG=$(echo "$FULL_CHANGELOG" | jq -Rsa .)

          DATA=$(cat <<EOF
          {
            "model": "gpt-4",
            "messages": [
              {"role": "system", "content": "You are an assistant that generates concise and clear release summaries for software projects."},
              {"role": "user", "content": "Summarize the following changes for a GitHub release:\n\n$ESCAPED_CHANGELOG"}
            ],
            "temperature": 0.7
          }
          EOF
          )

          echo "===== JSON Payload Sent to GPT-4 ====="
          echo "$DATA"

          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d "$DATA")

          echo "===== OpenAI API Response ====="
          echo "$RESPONSE"

          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "===== Generated Summary ====="
          echo "$SUMMARY"

          echo "$SUMMARY" > summary.txt
          echo "summary=$SUMMARY" >> $GITHUB_ENV
          env:
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          run: |
            FULL_CHANGELOG=$(cat full_changelog.txt)

            echo "===== Input to GPT-4 ====="
            echo "$FULL_CHANGELOG"

            DATA='{
              "model": "gpt-4",
              "messages": [
                {"role": "system", "content": "You are an assistant that generates concise and clear release summaries for software projects."},
                {"role": "user", "content": "Summarize the following changes for a GitHub release:\n\n'"${FULL_CHANGELOG}"'"}
              ],
              "temperature": 0.7
            }'

            RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -d "$DATA")

            echo "===== OpenAI API Response ====="
            echo "$RESPONSE"

            SUMMARY=$(echo $RESPONSE | jq -r '.choices[0].message.content')
            echo "===== Generated Summary ====="
            echo "$SUMMARY"

            echo "$SUMMARY" > summary.txt
            echo "summary=$SUMMARY" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag -a ${{ env.new_version }} -m "Release ${{ env.new_version }}"
          git push origin ${{ env.new_version }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.new_version }}" --title "Release ${{ env.new_version }}" --notes "$(cat summary.txt)"
