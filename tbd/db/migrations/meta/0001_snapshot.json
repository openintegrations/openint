{
  "id": "8762c4c1-cb83-4599-9fad-d2785d1ee29e",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.connection": {
      "name": "connection",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true,
          "default": "concat('conn_', generate_ulid())"
        },
        "connector_name": {
          "name": "connector_name",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true,
          "generated": {
            "type": "stored",
            "as": "split_part((id)::text, '_'::text, 2)"
          }
        },
        "customer_id": {
          "name": "customer_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "connector_config_id": {
          "name": "connector_config_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "integration_id": {
          "name": "integration_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "env_name": {
          "name": "env_name",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "settings": {
          "name": "settings",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "display_name": {
          "name": "display_name",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "disabled": {
          "name": "disabled",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "connection_created_at": {
          "name": "connection_created_at",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "connection_customer_id": {
          "name": "connection_customer_id",
          "columns": [
            {
              "expression": "customer_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "connection_provider_name": {
          "name": "connection_provider_name",
          "columns": [
            {
              "expression": "connector_name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "connection_updated_at": {
          "name": "connection_updated_at",
          "columns": [
            {
              "expression": "updated_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        }
      },
      "foreignKeys": {
        "fk_connector_config_id": {
          "name": "fk_connector_config_id",
          "tableFrom": "connection",
          "columnsFrom": [
            "connector_config_id"
          ],
          "tableTo": "connector_config",
          "schemaTo": "public",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "cascade",
          "onDelete": "restrict"
        },
        "fk_integration_id": {
          "name": "fk_integration_id",
          "tableFrom": "connection",
          "columnsFrom": [
            "integration_id"
          ],
          "tableTo": "integration",
          "schemaTo": "public",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "cascade",
          "onDelete": "restrict"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "org_member_access": {
          "name": "org_member_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ],
          "using": "((connector_config_id)::text IN ( SELECT connector_config.id\n   FROM connector_config\n  WHERE ((connector_config.org_id)::text = (jwt_org_id())::text)))",
          "withCheck": "((connector_config_id)::text IN ( SELECT connector_config.id\n   FROM connector_config\n  WHERE ((connector_config.org_id)::text = (jwt_org_id())::text)))"
        },
        "org_access": {
          "name": "org_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "org"
          ]
        },
        "customer_access": {
          "name": "customer_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "customer"
          ]
        }
      },
      "checkConstraints": {
        "connection_id_prefix_check": {
          "name": "connection_id_prefix_check",
          "value": "CHECK (starts_with((id)::text, 'conn_'::text"
        }
      },
      "isRLSEnabled": true
    },
    "public.pipeline": {
      "name": "pipeline",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true,
          "default": "concat('pipe_', generate_ulid())"
        },
        "source_id": {
          "name": "source_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "source_state": {
          "name": "source_state",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "destination_id": {
          "name": "destination_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "destination_state": {
          "name": "destination_state",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "link_options": {
          "name": "link_options",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'[]'::jsonb"
        },
        "last_sync_started_at": {
          "name": "last_sync_started_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "last_sync_completed_at": {
          "name": "last_sync_completed_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "disabled": {
          "name": "disabled",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "streams": {
          "name": "streams",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "source_vertical": {
          "name": "source_vertical",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "destination_vertical": {
          "name": "destination_vertical",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "pipeline_created_at": {
          "name": "pipeline_created_at",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "pipeline_destination_id": {
          "name": "pipeline_destination_id",
          "columns": [
            {
              "expression": "destination_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "pipeline_source_id": {
          "name": "pipeline_source_id",
          "columns": [
            {
              "expression": "source_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "pipeline_updated_at": {
          "name": "pipeline_updated_at",
          "columns": [
            {
              "expression": "updated_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        }
      },
      "foreignKeys": {
        "fk_destination_id": {
          "name": "fk_destination_id",
          "tableFrom": "pipeline",
          "columnsFrom": [
            "destination_id"
          ],
          "tableTo": "connection",
          "schemaTo": "public",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "cascade",
          "onDelete": "cascade"
        },
        "fk_source_id": {
          "name": "fk_source_id",
          "tableFrom": "pipeline",
          "columnsFrom": [
            "source_id"
          ],
          "tableTo": "connection",
          "schemaTo": "public",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "cascade",
          "onDelete": "cascade"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "customer_access": {
          "name": "customer_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "customer"
          ],
          "using": "( SELECT (ARRAY( SELECT connection.id\n           FROM connection\n          WHERE (((connection.connector_config_id)::text IN ( SELECT connector_config.id\n                   FROM connector_config\n                  WHERE ((connector_config.org_id)::text = (jwt_org_id())::text))) AND ((connection.customer_id)::text = (( SELECT jwt_customer_id() AS jwt_customer_id))::text))) && ARRAY[pipeline.source_id, pipeline.destination_id]))"
        },
        "org_access": {
          "name": "org_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "org"
          ]
        },
        "org_member_access": {
          "name": "org_member_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ]
        }
      },
      "checkConstraints": {
        "pipeline_id_prefix_check": {
          "name": "pipeline_id_prefix_check",
          "value": "CHECK (starts_with((id)::text, 'pipe_'::text"
        }
      },
      "isRLSEnabled": true
    },
    "public.integration": {
      "name": "integration",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true,
          "default": "concat('int_', generate_ulid())"
        },
        "connector_name": {
          "name": "connector_name",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true,
          "generated": {
            "type": "stored",
            "as": "split_part((id)::text, '_'::text, 2)"
          }
        },
        "standard": {
          "name": "standard",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "external": {
          "name": "external",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        }
      },
      "indexes": {
        "institution_created_at": {
          "name": "institution_created_at",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "institution_provider_name": {
          "name": "institution_provider_name",
          "columns": [
            {
              "expression": "connector_name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "institution_updated_at": {
          "name": "institution_updated_at",
          "columns": [
            {
              "expression": "updated_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        }
      },
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "org_write_access": {
          "name": "org_write_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ],
          "using": "true",
          "withCheck": "true"
        },
        "public_readonly_access": {
          "name": "public_readonly_access",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {
        "integration_id_prefix_check": {
          "name": "integration_id_prefix_check",
          "value": "CHECK (starts_with((id)::text, 'int_'::text"
        }
      },
      "isRLSEnabled": true
    },
    "public.connector_config": {
      "name": "connector_config",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "varchar",
          "primaryKey": true,
          "notNull": true,
          "default": "concat('ccfg_', generate_ulid())"
        },
        "connector_name": {
          "name": "connector_name",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true,
          "generated": {
            "type": "stored",
            "as": "split_part((id)::text, '_'::text, 2)"
          }
        },
        "config": {
          "name": "config",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": true,
          "default": "'{}'::jsonb"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "now()"
        },
        "org_id": {
          "name": "org_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": true
        },
        "display_name": {
          "name": "display_name",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false
        },
        "env_name": {
          "name": "env_name",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "type": "stored",
            "as": "(config ->> 'envName'::text)"
          }
        },
        "disabled": {
          "name": "disabled",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "default_pipe_out": {
          "name": "default_pipe_out",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "default_pipe_in": {
          "name": "default_pipe_in",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "default_pipe_out_destination_id": {
          "name": "default_pipe_out_destination_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "type": "stored",
            "as": "(default_pipe_out ->> 'destination_id'::text)"
          }
        },
        "default_pipe_in_source_id": {
          "name": "default_pipe_in_source_id",
          "type": "varchar",
          "primaryKey": false,
          "notNull": false,
          "generated": {
            "type": "stored",
            "as": "(default_pipe_in ->> 'source_id'::text)"
          }
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {
        "integration_created_at": {
          "name": "integration_created_at",
          "columns": [
            {
              "expression": "created_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "integration_org_id": {
          "name": "integration_org_id",
          "columns": [
            {
              "expression": "org_id",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "integration_provider_name": {
          "name": "integration_provider_name",
          "columns": [
            {
              "expression": "connector_name",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "text_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        },
        "integration_updated_at": {
          "name": "integration_updated_at",
          "columns": [
            {
              "expression": "updated_at",
              "isExpression": false,
              "asc": true,
              "nulls": "last",
              "opclass": "timestamptz_ops"
            }
          ],
          "isUnique": false,
          "with": {},
          "method": "btree",
          "concurrently": false
        }
      },
      "foreignKeys": {
        "fk_default_pipe_in_source_id": {
          "name": "fk_default_pipe_in_source_id",
          "tableFrom": "connector_config",
          "columnsFrom": [
            "default_pipe_in_source_id"
          ],
          "tableTo": "connection",
          "schemaTo": "public",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "restrict",
          "onDelete": "restrict"
        },
        "fk_default_pipe_out_destination_id": {
          "name": "fk_default_pipe_out_destination_id",
          "tableFrom": "connector_config",
          "columnsFrom": [
            "default_pipe_out_destination_id"
          ],
          "tableTo": "connection",
          "schemaTo": "public",
          "columnsTo": [
            "id"
          ],
          "onUpdate": "restrict",
          "onDelete": "restrict"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "org_access": {
          "name": "org_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "org"
          ],
          "using": "((org_id)::text = (jwt_org_id())::text)",
          "withCheck": "((org_id)::text = (jwt_org_id())::text)"
        },
        "customer_access": {
          "name": "customer_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "customer"
          ]
        },
        "org_member_access": {
          "name": "org_member_access",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "authenticated"
          ]
        }
      },
      "checkConstraints": {
        "connector_config_id_prefix_check": {
          "name": "connector_config_id_prefix_check",
          "value": "CHECK (starts_with((id)::text, 'ccfg_'::text"
        }
      },
      "isRLSEnabled": true
    }
  },
  "enums": {},
  "schemas": {},
  "views": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  },
  "internal": {
    "tables": {}
  }
}