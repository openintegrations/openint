-- Generated by drizzle-kit but not in fact needed as 0000_snapshot.json should
-- Already match the state of migration

-- CREATE ROLE "customer";--> statement-breakpoint
-- CREATE ROLE "org";--> statement-breakpoint
-- CREATE ROLE "authenticated";--> statement-breakpoint
-- ALTER TABLE "connection" DROP CONSTRAINT "connection_id_prefix_check";--> statement-breakpoint
-- ALTER TABLE "pipeline" DROP CONSTRAINT "pipeline_id_prefix_check";--> statement-breakpoint
-- ALTER TABLE "integration" DROP CONSTRAINT "integration_id_prefix_check";--> statement-breakpoint
-- ALTER TABLE "connector_config" DROP CONSTRAINT "connector_config_id_prefix_check";--> statement-breakpoint
-- DROP INDEX "connection_created_at";--> statement-breakpoint
-- DROP INDEX "connection_customer_id";--> statement-breakpoint
-- DROP INDEX "connection_provider_name";--> statement-breakpoint
-- DROP INDEX "connection_updated_at";--> statement-breakpoint
-- DROP INDEX "pipeline_created_at";--> statement-breakpoint
-- DROP INDEX "pipeline_destination_id";--> statement-breakpoint
-- DROP INDEX "pipeline_source_id";--> statement-breakpoint
-- DROP INDEX "pipeline_updated_at";--> statement-breakpoint
-- DROP INDEX "institution_created_at";--> statement-breakpoint
-- DROP INDEX "institution_provider_name";--> statement-breakpoint
-- DROP INDEX "institution_updated_at";--> statement-breakpoint
-- DROP INDEX "integration_created_at";--> statement-breakpoint
-- DROP INDEX "integration_org_id";--> statement-breakpoint
-- DROP INDEX "integration_provider_name";--> statement-breakpoint
-- DROP INDEX "integration_updated_at";--> statement-breakpoint
-- ALTER TABLE "connection" ALTER COLUMN "id" SET DEFAULT 'concat(''conn_'', generate_ulid())';--> statement-breakpoint
-- ALTER TABLE "pipeline" ALTER COLUMN "id" SET DEFAULT 'concat(''pipe_'', generate_ulid())';--> statement-breakpoint
-- ALTER TABLE "integration" ALTER COLUMN "id" SET DEFAULT 'concat(''int_'', generate_ulid())';--> statement-breakpoint
-- ALTER TABLE "connector_config" ALTER COLUMN "id" SET DEFAULT 'concat(''ccfg_'', generate_ulid())';--> statement-breakpoint
-- CREATE INDEX "connection_created_at" ON "connection" USING btree ("created_at");--> statement-breakpoint
-- CREATE INDEX "connection_customer_id" ON "connection" USING btree ("customer_id");--> statement-breakpoint
-- CREATE INDEX "connection_provider_name" ON "connection" USING btree ("connector_name");--> statement-breakpoint
-- CREATE INDEX "connection_updated_at" ON "connection" USING btree ("updated_at");--> statement-breakpoint
-- CREATE INDEX "pipeline_created_at" ON "pipeline" USING btree ("created_at");--> statement-breakpoint
-- CREATE INDEX "pipeline_destination_id" ON "pipeline" USING btree ("destination_id");--> statement-breakpoint
-- CREATE INDEX "pipeline_source_id" ON "pipeline" USING btree ("source_id");--> statement-breakpoint
-- CREATE INDEX "pipeline_updated_at" ON "pipeline" USING btree ("updated_at");--> statement-breakpoint
-- CREATE INDEX "institution_created_at" ON "integration" USING btree ("created_at");--> statement-breakpoint
-- CREATE INDEX "institution_provider_name" ON "integration" USING btree ("connector_name");--> statement-breakpoint
-- CREATE INDEX "institution_updated_at" ON "integration" USING btree ("updated_at");--> statement-breakpoint
-- CREATE INDEX "integration_created_at" ON "connector_config" USING btree ("created_at");--> statement-breakpoint
-- CREATE INDEX "integration_org_id" ON "connector_config" USING btree ("org_id");--> statement-breakpoint
-- CREATE INDEX "integration_provider_name" ON "connector_config" USING btree ("connector_name");--> statement-breakpoint
-- CREATE INDEX "integration_updated_at" ON "connector_config" USING btree ("updated_at");--> statement-breakpoint
-- ALTER TABLE "connection" ADD CONSTRAINT "connection_id_prefix_check" CHECK (starts_with(id, 'conn_'));--> statement-breakpoint
-- ALTER TABLE "pipeline" ADD CONSTRAINT "pipeline_id_prefix_check" CHECK (starts_with(id, 'pipe_'));--> statement-breakpoint
-- ALTER TABLE "integration" ADD CONSTRAINT "integration_id_prefix_check" CHECK (starts_with(id, 'int_'));--> statement-breakpoint
-- ALTER TABLE "connector_config" ADD CONSTRAINT "connector_config_id_prefix_check" CHECK (starts_with(id, 'ccfg_'));--> statement-breakpoint
-- ALTER POLICY "org_member_access" ON "connection" TO authenticated USING ((
--         connector_config_id IN (
--           SELECT connector_config.id
--           FROM public.connector_config
--           WHERE connector_config.org_id = public.jwt_org_id()
--         )
--       )) WITH CHECK ((
--         connector_config_id IN (
--           SELECT connector_config.id
--           FROM public.connector_config
--           WHERE connector_config.org_id = public.jwt_org_id()
--         )
--       ));--> statement-breakpoint
-- ALTER POLICY "org_access" ON "connection" TO org USING ((
--         connector_config_id IN (
--           SELECT connector_config.id
--           FROM public.connector_config
--           WHERE connector_config.org_id = public.jwt_org_id()
--         )
--       )) WITH CHECK ((
--         connector_config_id IN (
--           SELECT connector_config.id
--           FROM public.connector_config
--           WHERE connector_config.org_id = public.jwt_org_id()
--         )
--       ));--> statement-breakpoint
-- ALTER POLICY "customer_access" ON "connection" TO customer USING ((
--         connector_config_id IN (
--           SELECT connector_config.id
--           FROM public.connector_config
--           WHERE connector_config.org_id = public.jwt_org_id()
--         )
--         AND customer_id = (SELECT public.jwt_customer_id())
--       ));--> statement-breakpoint
-- ALTER POLICY "customer_access" ON "pipeline" TO customer USING ((
--         SELECT array(
--           SELECT id
--           FROM connection
--           WHERE
--             connector_config_id = ANY(
--               SELECT id
--               FROM connector_config
--               WHERE org_id = jwt_org_id()
--             )
--             AND customer_id = (SELECT jwt_customer_id())
--         ) && array[pipeline.source_id, pipeline.destination_id]
--       ));--> statement-breakpoint
-- ALTER POLICY "org_access" ON "pipeline" TO org USING ((
--         SELECT array(
--           SELECT r.id
--           FROM resource r
--           JOIN connector_config cc on r.connector_config_id = cc.id
--           WHERE cc.org_id = jwt_org_id()
--         ) && array[source_id, destination_id]
--         ) WITH CHECK ( && and @> is the same, however we are using && to stay consistent with end user policy
--       ));--> statement-breakpoint
-- ALTER POLICY "org_member_access" ON "pipeline" TO authenticated USING ((
--         array(
--           select r.id
--           from resource r
--           join connector_config cc on cc.id = r.connector_config_id
--           where cc.org_id = jwt_org_id()
--         ) && array[source_id, destination_id]
--         ) WITH CHECK ( && and @> is the same, however we are using && to stay consistent with end user policy
--       ));--> statement-breakpoint
-- ALTER POLICY "public_readonly_access" ON "integration" TO public USING (true);--> statement-breakpoint
-- ALTER POLICY "org_access" ON "connector_config" TO org USING (org_id = jwt_org_id()) WITH CHECK (org_id = jwt_org_id());--> statement-breakpoint
-- ALTER POLICY "customer_access" ON "connector_config" TO customer USING (org_id = public.jwt_org_id());--> statement-breakpoint
-- ALTER POLICY "org_member_access" ON "connector_config" TO authenticated USING (org_id = public.jwt_org_id()) WITH CHECK (org_id = public.jwt_org_id());
